#!/bin/sh
# vi: set ft=sh noet ts=8 sw=8 :: Vi/ViM
############################################################ IDENT(1)
#
# $Title: Script to generate top-like statistics for BeeGFS I/O $
# $Copyright: 2020 Devin Teske. All rights reserved. $
# $FrauBSD: beegfstop/beegfstop 2020-05-16 18:49:04 -0700 freebsdfrau $
#
############################################################ INFORMATION
#
# In beegfstop, a ``view'' is the user's choice between -c, -s, or -u.
# For example, `-u' asks beegfstop to display the ``user view'' where statistics
# displayed are on a per-user basis.
#
# The code is broken down into:
# 	- View selection (user choice)
# 	- Inspection of running system
# 	- beegfs-ctl execution
# 	- awk to process beegfs-ctl output
#
# Code navigating Search Terms/ST:
# 	CTLDATA		beegfs-ctl data generation and processing
# 	JSONDATA	JSON data generation
# 	OPS		Data operations (read vs write)
# 	POST		beegfs-ctl post-processor (awk)
# 	PRE		Start of pre-processor (sh)
# 	VIEWDATA	View data generation
# 	VIEWS		View processing
#
############################################################ DEFAULTS

DEFAULT_INTERVAL=2 # seconds

############################################################ GLOBALS

VERSION='$Version: 3.7.5 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
COLOR=					# -C
DEBUGGER=				# -D
INTERVAL=$DEFAULT_INTERVAL		# -i sec
NO_NAMES=				# -n
NSAMPLES=				# -N num
OUTPUT_JSON=				# -j
RAW_VIEW=				# -r
SHOW_BYTES=				# -b
VIEW_CLIENT=				# -c
VIEW_SERVER=				# -s
VIEW_USER=				# -u (default)
WIDE_VIEW=				# -w

#
# Miscellaneous
#
CONS=1
VIEW=

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

usage()
{
	local fmt="$1"
	local optfmt="\t%-11s %s\n"

	exec >&2
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@"
	fi

	printf "Usage: %s [OPTIONS]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-b" "Show bytes instead of bandwidth."
	printf "$optfmt" "-C" "Always enable color."
	printf "$optfmt" "-c" "View read/write activity by client."
	printf "$optfmt" "-D" "Enable debugger."
	printf "$optfmt" "-h" "Print usage statement and exit."
	printf "$optfmt" "-i sec" \
		"Set interval seconds. Default \`$DEFAULT_INTERVAL'."
	printf "$optfmt" "-j" "Output JSON formatted data."
	printf "$optfmt" "-N num" "Perform num samples and exit."
	printf "$optfmt" "-n" "Do not attempt to map uid/gid/ip to names."
	printf "$optfmt" "-r" "Raw view. Do not format output of bpftrace."
	printf "$optfmt" "-s" "View read/write activity by server."
	printf "$optfmt" "-u" "View read/write activity by user (default)."
	printf "$optfmt" "-v" "Print version and exit."
	printf "$optfmt" "-w" "Wide view. Maximize width of first column."

	die
}

run_beegfs_ctl()
{
	set -- --nodetype=storage --interval=$INTERVAL "$@"
	[ "$NO_NAMES" ] || set -- --names "$@"
	if [ "$VIEW_CLIENT" ]; then
		set -- --clientstats --rwunit=B --perinterval "$@"
	elif [ "$VIEW_SERVER" ]; then
		set -- --serverstats --perserver "$@"
	elif [ "$VIEW_USER" ]; then
		set -- --userstats --rwunit=B --perinterval "$@"
	fi
	expect -f- strace -e trace=poll beegfs-ctl "$@" <<-'END-EXPECT' | awk '
		!/^(poll\(|\))/ { print; fflush(); next}
		sub(/^poll\(.*fd=0.*/, "---") { print; fflush() }
	' # END-AWK
		spawn {*}$argv
		while (1) {
			expect {
				-re "fd=0" { send_user "\n" }
				eof { exit 0 }
			}
		}
	END-EXPECT
}

#
# ST: CALLS
#

send_user()
{
	local type="$1"
	shift 1 # type
	printf "%s|%s\n" "$type" "$*"
}

resize()
{
	local size
	if [ -e /dev/tty ]; then
		size=$( stty size < /dev/tty 2> /dev/null )
	else
		size=$( stty size 2> /dev/null )
	fi
	send_user resize "${size:-24 80}"
}

############################################################ MAIN

#
# Process command-line options
#
while getopts bCcDhi:jN:nrsuvw flag; do
	case "$flag" in
	b) SHOW_BYTES=1 ;;
	C) COLOR=1 ;;
	c) VIEW=CLIENT VIEW_CLIENT=1 ;;
	D) DEBUGGER=1 RAW_VIEW=1 ;;
	i) INTERVAL="$OPTARG" ;;
	j) OUTPUT_JSON=1 ;;
	N) [ "$OPTARG" ] || usage "-N option requires an argument" # NOTREACHED
		NSAMPLES="$OPTARG" ;;
	n) NO_NAMES=1 ;;
	r) RAW_VIEW=1 ;;
	s) VIEW=SERVER VIEW_SERVER=1 ;;
	u) VIEW=USER VIEW_USER=1 ;;
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	w) WIDE_VIEW=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Process command-line arguments
#
[ $# -eq 0 ] || usage "Too many arguments" # NOTREACHED

#
# Prevent non-functional option combinations
#
if [ "$SHOW_BYTES" ]; then
	[ ! "$OUTPUT_JSON" ] || die "-b cannot be combined with -j"
fi

#
# Silently ignore previous view options unless JSON output
#
[ "$VIEW" ] || VIEW=USER VIEW_USER=1
if [ ! "$OUTPUT_JSON" ]; then
	case "$VIEW" in # ST: VIEWS
	CLIENT) VIEW_SERVER= VIEW_USER= ;;
	SERVER) VIEW_CLIENT= VIEW_USER= ;;
	USER) VIEW_CLIENT= VIEW_SERVER= ;;
	esac
fi

#
# Process `-C' option
#
if [ "$COLOR" ]; then
	CONS=1
else
	[ -t 1 ] || CONS= # stdout is not a tty
fi

#
# Validate `-i sec' option
#
case "$INTERVAL" in
"") usage "missing -i argument" ;; # NOTREACHED
0) die "-i sec must be non-zero" ;;
*[!0-9]*) die "-i sec must be a number" ;;
esac

#
# Validate `-N num' option
#
case "$NSAMPLES" in
*[!0-9]*) die "-N num must be a positive integer" ;;
esac

#
# Get terminal size
#
size=$( resize )
size="${size#*|}"
if [ "$size" ]; then
	cols="${size#*[$IFS]}"
	rows="${size%%[$IFS]*}"
fi
case "$rows$cols" in
""|*[!0-9]*)
	cols=80
	rows=24
	;;
esac

#
# Run script
# ST: PRE
#
{
	trap resize SIGWINCH

	run_beegfs_ctl &
	bpid=$!

	#
	# Wait on background (beegfs-ctl) child
	#
	status_collected=
	while kill -0 $bpid > /dev/null 2>&1; do
		wait > /dev/null 2>&1 # Collect exit status
		[ "$status_collected" ] || status_collected=$?
	done
	echo EXIT:$status_collected # Send status to post-processor

} | awk -v cols=$cols \
	-v cons=${CONS:-0} \
	-v debugger=${DEBUGGER:-0} \
	-v interval=$INTERVAL \
	-v no_names=${NO_NAMES:-0} \
	-v nsamples=${NSAMPLES:--1} \
	-v output_json=${OUTPUT_JSON:-0} \
	-v raw_view=${RAW_VIEW:-0} \
	-v rows=$rows \
	-v show_bytes=${SHOW_BYTES:-0} \
	-v uname=$( uname ) \
	-v view="$VIEW" \
	-v wide_view=${WIDE_VIEW:-0} \
	'####################################### BEGIN

	# ST: POST

	BEGIN {
		debug2("Terminal size (rows, cols) = (%d, %d)", rows, cols)

		exit_status = 0 # SUCCESS
		in_summary = 1
		time_delta = 0 # Calculated
		samples_left = ++nsamples
		tm = _systime()

		inv	= "\033[7m"
		noinv	= "\033[27m"
		bold    = "\033[1m"
		nobold  = "\033[22m"
		red     = "\033[31m"
		green   = "\033[32m"
		yellow  = "\033[33m"
		cyan    = "\033[36m"
		fgreset = "\033[39m"

		# Obtain current process (awk) pid
		(cmd = "echo $PPID") | getline apid
		close(cmd)

		# Obtain parent process (sh) pid
		getline stat < (file = sprintf("/proc/%d/stat", apid))
		close(file)
		split(stat, st)
		spid = st[4]

		# Obtain parent process (sh) name
		getline stat < (file = sprintf("/proc/%d/stat", spid))
		close(file)
		split(stat, st)
		comm = st[2]
		if (match(comm, /^\(.*\)$/))
			comm = substr(comm, 2, length(comm) - 2)

		# Obtain child (sh) pid
		(cmd = sprintf("pgrep -P %d %s", spid, comm)) | getline cpid
		close(cmd)

		# Obtain beegfs-ctl pid
		(cmd = sprintf("pgrep -P %d", cpid)) | getline spid
		close(cmd)
		(cmd = sprintf("pgrep -P %d expect", spid)) | getline epid
		close(cmd)
		(cmd = sprintf("pgrep -P %d strace", epid)) | getline spid
		close(cmd)
		(cmd = sprintf("pgrep -P %d beegfs-ctl", spid)) | getline bpid
		close(cmd)

		if (!raw_view) {
			clear_data()
			resize()
		}
	}

	######################################## FUNCTIONS

	function _systime(        cmd, tm) {
		if (uname == "Linux") return systime()
		(cmd = "date +%s") | getline tm
		close(cmd)
		return tm
	}

	function debug1(fmt,a1) { if (debugger) printf fmt "\n", a1 }
	function debug2(fmt,a1,a2) { if (debugger) printf fmt "\n", a1, a2 }
	function buffer_add(text) { BUFFER = BUFFER text }

	function print_buffer()
	{
		if (!cons) buffer_add("\n")
		printf "%s", BUFFER
		fflush()
	}

	function resize()
	{
		if (output_json) return

		#
		# Calculate columns and column widths
		# ST: VIEWS
		#
		# NB: bar_size = size of bar column
		# NB: dsz = size of TOTAL, READ(IN), WRITE(OUT) data columns
		# NB: vsz = size of VIEW column ("view size")
		#
		# If given -w (wide view) make bar_size fixed-width and
		# vsz variable-width.
		#
		# Without -w, make vsz fixed-width and bar_size variable.
		#
		dsz = show_bytes ? 10 : 12
		vsz_fixed = show_bytes ? 21 : 15 # VIEW column
		bar_size_fixed = cols <= 80 ? 11 : 21
		if (wide_view) {
			# Fixed-width
			bar_size = bar_size_fixed

			# Variable-width (%-*s)
			vsz = cols
			vsz -= 0 + 1 # variable-width VIEW + space
			vsz -= dsz + 1 # TOTAL + space
			vsz -= dsz + 1 # WRITE(IN) + space
			vsz -= bar_size + 1 # bar + space
			vsz -= dsz # READ(OUT)
		} else {
			# Fixed-width
			vsz = vsz_fixed

			# Variable-width (%-*s)
			bar_size = cols
			bar_size -= vsz + 1 # VIEW + space
			bar_size -= dsz + 1 # TOTAL + space
			bar_size -= dsz + 1 # WRITE(IN) + space
			bar_size -= 0 + 1 # variable-width bar + space
			bar_size -= dsz # READ(OUT)
		}

		#
		# Calculate format and line width
		# ST: VIEWS
		#
		fmt = ""
		fmtsz = 0
		fmt = fmt " %-" vsz "s" # VIEW column
		fmtsz += 1 + vsz
		fmt = fmt " %" dsz "s" # TOTAL column
		if (cons) {
			fmt = fmt " " red "%" dsz "s" # WRITE(IN) column
		} else {
			fmt = fmt " %" dsz "s" # WRITE(IN) column
		}
		fmtsz += 1 + dsz + 1 + dsz
		fmt = fmt " %*s" # write_bar
		full_bar = bar_size
		bar_size = int(bar_size / 2)
		if (bar_size * 2 == full_bar) bar_size--
		if (cons) {
			fmt = fmt fgreset "|" cyan "%-*s" # read_bar
		} else {
			fmt = fmt "|%-*s" # read_bar
		}
		fmtsz += 1 + bar_size + 1 + bar_size
		fmt = fmt " %-" dsz "s" # READ(OUT) column
		fmtsz += 1 + dsz
		fmt = substr(fmt, 2) # Trim leading space
		fmtsz -= 1
		fmt = fmt (cons ? fgreset : "") "\n"

		if (cons) {
			clear_buffer()
			buffer_add_data()
			print_buffer()
		}
	}

	function clear_data()
	{
		# ST: VIEWS
		delete _keys

		delete key_read
		delete key_write
	}

	function clear_buffer()
	{
		BUFFER = ""
		if (output_json) return
		if (!debugger && cons)
			buffer_add(sprintf("\033[H\033[J"))
		buffer_add_header()
	}

	function buffer_add1(arg1, total, read, read_bar, write_bar,
		write, prefix, suffix)
	{
		buffer_add(sprintf(prefix fmt suffix, arg1, total, write,
			bar_size, write_bar, bar_size, read_bar, read))
	}

	function _strftime(fmt, tm,        cmd, tfmt)
	{
		if (uname == "Linux") return strftime(fmt, tm)
		if (tm == _strftime_tm && fmt == _strftime_fmt)
			return _strftime_dt
		tfmt = uname == "Linux" ? "-d @%u" : "-r %u"
		(cmd = sprintf("date " tfmt " +\"%s\"", _strftime_tm = tm,
			_strftime_fmt = fmt)) | getline _strftime_dt
		close(cmd)
		return _strftime_dt
	}

	function buffer_add_header(        prefix, suffix)
	{
		if (output_json) return
		buffer_add(sprintf("Interval: %-*s %31s\n",
			fmtsz - 9 - 2 - 31,
			sprintf("%.3f", interval) "s",
			_strftime("%c", tm)))
				#  9 = "Interval:"
				#  2 = number of spaces
				# 31 = %31s date
		prefix = cons ? inv green : ""
		suffix = cons ? fgreset noinv : ""
		empty_bar = ""
		# ST: VIEWS
		buffer_add1(view, "TOTAL",
			"READ(OUT)", empty_bar, empty_bar, "WRITE(IN)",
			prefix, suffix)
	}

	function buffer_add_data()
	{
		#
		# Process requested view
		#
		process_view(tolower(view))
	}

	function parse_line()
	{
		# ST: CTLDATA
		sub(/\r$/, "")
		if (match($0, /[^[:space:][:digit:]][[:digit:]]+ \[sum\]/)) {
			$0 = substr($0, 1, RSTART) " " substr($0, RSTART + 1)
		}

		#
		# ST: VIEWS
		#

		if (view == "SERVER") {
			key = no_names ? $1 : $NF
		} else {
			key = $1
		}

		read_bytes = write_bytes = 0
		if (view == "SERVER") {
			# NB: KiB/s -> B/interval
			read_bytes = $3 * 1024 * interval
			write_bytes = $2 * 1024 * interval
		} else {
			delete _props
			$0 = substr($0, length(key) + 1)
			while (match($0, /^ *[^ ]+ \[[^\]]+\]/)) {
				kprop = substr($2, 2, length($2) - 2)
				value = $1
				_props[kprop] = value
				$0 = substr($0, RLENGTH + 1)
			}
			read_bytes = int(_props["B-rd"])
			write_bytes = int(_props["B-wr"])
		}
		if (read_bytes + write_bytes < 1) return 0

		#
		# ST: OPS
		#

		_keys[key]
		if (view == "SERVER") {
			key_read["Sum:"] += read_bytes
			key_write["Sum:"] += write_bytes
		}
		key_read[key] = read_bytes
		key_write[key] = write_bytes

		return 1
	}

	function humanize(value,        raw, n, suffix, suffixes)
	{
		raw = value
		n = split(",K,M,G,T,E", suffixes, /,/)
		for (suffix = 1; suffix <= n; suffix++) {
			if (int(value) < 1024) break
			value /= 1024
		}
		if (v ~ /\./) sub(/\.?0+$/, "", v)
		value = sprintf("%'"'"'.2f%s%s", value, suffixes[suffix],
			show_bytes ? "B" : "B/s")
		return value
	}

	function _asort(src, dest,        k, nitems, i, val)
	{
		k = nitems = 0
		for (i in src) dest[++nitems] = src[i]
		for (i = 1; i <= nitems; k = i++) {
			val = dest[i]
			while ((k > 0) && (dest[k] > val)) {
				dest[k+1] = dest[k]; k--
			}
			dest[k+1] = val
		}
		return nitems
	}

	function json_add(json, key, format, value)
	{
		return json (length(json) < 2 ? "" : ",") \
			sprintf("\"%s\":" format, key, value)
	}

	function json_add_str(json, key, value)
	{
		return json_add(json, key, "\"%s\"", value)
	}

	function json_add_uint(json, key, value)
	{
		return json_add(json, key, "%u", value)
	}

	function json_add_prec(json, key, precision, value,        x)
	{
		x = sprintf("%.*f", precision, value)
		if (x ~ /\./) sub(/\.?0+$/, "", x)
		return json_add(json, key, "%s", x)
	}

	function json_add_float(json, key, value)
	{
		return json_add_prec(json, key, 12, value)
	}

	function sample_check()
	{
		if (nsamples > 0 && --samples_left < 1) {
			system(sprintf("kill %d > /dev/null 2>&1", bpid))
			if (more) printf "\n"
			exit
		}
	}

	function process_view(curview,
		read_bar, read_rate, read_total,
		write_bar, write_rate, write_total,
		rw_rate, rw_total,
		_keys_sorted, cred, i, v, r, n, table_rows)
	{
		time_delta = interval
		if (time_delta < 1) time_delta = 1 # prevent division-by-0
		debug1("Time delta is %d seconds", time_delta)

		if (output_json && in_summary) {
			in_summary = 0
			if (nsamples != 1) return
		}

		read_total = key_read["Sum:"]
		read_rate = read_total / interval
		read_bar = ""

		write_total = key_write["Sum:"]
		write_rate = write_total / time_delta
		write_bar = ""

		rw_total = read_total + write_total
		rw_rate = rw_total / time_delta

		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out,
				"ident", "total_" curview)
			json_out = json_add_uint(json_out,
				"total_bytes", rw_total)
			json_out = json_add_float(json_out,
				"total_rate", rw_rate)
			json_out = json_add_uint(json_out,
				"read_bytes", read_total)
			json_out = json_add_float(json_out,
				"read_rate", read_rate)
			json_out = json_add_uint(json_out,
				"write_bytes", write_total)
			json_out = json_add_float(json_out,
				"write_rate", write_rate)
			buffer_add("{" json_out "}\n")
		} else if (show_bytes) {
			# ST: VIEWS
			buffer_add1("total", humanize(rw_total),
				humanize(read_total), read_bar,
				write_bar, humanize(write_total))
		} else {
			# ST: VIEWS
			buffer_add1("total", humanize(rw_rate),
				humanize(read_rate), read_bar,
				write_bar, humanize(write_rate))
		}

		#
		# Decorate combined read/write values
		#
		for (cred in _keys) {
			v = int(key_read[cred]) + int(key_write[cred])
			_keys[cred] = sprintf("%99d %s", v, cred)
		}

		#
		# Print subtotals
		#
		r = 1
		n = _asort(_keys, _keys_sorted)
		table_rows = output_json || !cons ? n : rows - 4
		for (i = n; i >= 1 && r <= table_rows; i--) {
			debug2("r=[%d] table_rows=[%d]", r, table_rows)
			cred = _keys_sorted[i]
			sub(/^ *[^ ]+ +/, "", cred) # Undecorate
			r += process_cred(curview, cred,
				read_total, write_total)
		}
		if (more = i > 0) buffer_add(sprintf("%s(%d more) ... %s",
			cons ? inv bold yellow : "", i,
			cons ? noinv nobold fgreset : ""))
	}

	function process_cred(curview, cred, read_total, write_total,
		cred_read, read_bar, read_bar_pct, read_bar_size, read_rate,
		cred_write, write_bar, write_bar_pct, write_bar_size,
		write_rate, cred_rw, rw_rate, pch)
	{
		if (cred == "Sum:") return 0
		pch = "="
		debug1("-> process_cred(curview = %s, ...)", curview)
		debug1("+ cred=[%s]", cred)

		cred_read = key_read[cred]
		cred_write = key_write[cred]
		cred_rw = cred_read + cred_write

		read_rate = cred_read / time_delta
		if (read_total > 0)
			read_bar_pct = cred_read / read_total
		else
			read_bar_pct = 0
		read_bar_size = bar_size * read_bar_pct
		read_bar = sprintf("%*s", read_bar_size, "")
		gsub(/ /, pch, read_bar)
		sub(/.$/, ">", read_bar)

		write_rate = cred_write / time_delta
		if (write_total > 0)
			write_bar_pct = cred_write / write_total
		else
			write_bar_pct = 0
		write_bar_size = bar_size * write_bar_pct
		write_bar = sprintf("%*s", write_bar_size, "")
		gsub(/ /, pch, write_bar)
		sub(/^./, "<", write_bar)

		rw_rate = cred_rw / time_delta
		if (output_json) {
			# ST: JSONDATA
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out, "ident", curview)
			json_out = json_add_str(json_out, curview, cred)
			json_out = json_add_uint(json_out,
				"total_bytes", cred_rw)
			json_out = json_add_float(json_out,
				"total_rate", rw_rate)
			json_out = json_add_uint(json_out,
				"read_bytes", cred_read)
			json_out = json_add_float(json_out,
				"read_rate", read_rate)
			json_out = json_add_uint(json_out,
				"write_bytes", cred_write)
			json_out = json_add_float(json_out,
				"write_rate", write_rate)
			buffer_add("{" json_out "}\n")
		} else if (show_bytes) {
			# ST: VIEWDATA
			if (length(cred) > vsz) {
				cred = substr(cred, 1, vsz)
			}
			buffer_add1(cred, humanize(cred_rw),
				humanize(cred_read), read_bar,
				write_bar, humanize(cred_write))
		} else {
			# ST: VIEWDATA
			if (length(cred) > vsz) {
				cred = substr(cred, 1, vsz)
			}
			buffer_add1(cred, humanize(rw_rate),
				humanize(read_rate), read_bar,
				write_bar, humanize(write_rate))
		}

		return 1
	}

	######################################## MAIN

	sub(/^EXIT:/, "") { exit_status = $0; next }
	NR == 1 && $1 == "spawn" && !raw_view { next }

	raw_view {
		print

		# Exit if no more samples desired
		if (/^---$/) sample_check()

		if (!debugger) next
	}

	#
	# ST: CTLDATA
	#

	/^===/ { # Data start
		tm = _systime()
		read_total = write_total = 0
		clear_data()
		clear_buffer()
		next
	}

	view == "SERVER" && /^[[:space:]]*[[:digit:]]/ { # Data
		parse_line()
		next
	}

	view != "SERVER" && /^[^-=[:space:]]/ && $1 !~ /\|/ { # Data
		parse_line()
		next
	}

	/^---$/ { # Data end
		buffer_add_data()

		#
		# Dump information
		#
		print_buffer()
		sample_check() # Exit if no more samples desired
		next
	}

	#
	# ST: CALLS
	#

	{ call = "" }

	match($0, /^[_a-z]+(-[_a-z]+)?\|/) {
		call = substr($0, 1, RLENGTH - 1)
		$0 = substr($0, RSTART + RLENGTH)
	}

	call == "resize" {
		if (output_json) next
		rows = $1
		cols = $2
		resize()
	}

	################################################## END

	END { exit exit_status }
' # END-QUOTE

################################################################################
# END
################################################################################
# Local Variables:
# mode: sh
# tab-width: 8
# sh-basic-offset: 8
# indent-tabs-mode: t
# backward-delete-char-untabify-method: nil
# End:
