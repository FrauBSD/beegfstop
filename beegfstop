#!/bin/sh
############################################################ IDENT(1)
#
# $Title: Script to generate top-like statistics for BeeGFS I/O $
# $Copyright: 2020 Devin Teske. All rights reserved. $
# $FrauBSD: beegfstop/beegfstop 2020-04-01 13:13:19 -0700 freebsdfrau $
#
############################################################ DEFAULTS

DEFAULT_INTERVAL=2 # seconds

############################################################ GLOBALS

VERSION='$Version: 0.1.7 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
INTERVAL=$DEFAULT_INTERVAL		# -i sec
NO_NAMES=				# -n
NSAMPLES=				# -N num
OUTPUT_JSON=				# -j
RAW_VIEW=				# -r
VIEW_CLIENT=				# -c
VIEW_SERVER=				# -s
VIEW_USER=				# -u (default)
WIDE_VIEW=				# -w

#
# Miscellaneous
#
INTERVAL_PROBE= # Calculated
INTERVAL_SECONDS= # Raw value for awk
VIEW=

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

usage()
{
	local fmt="$1"
	local optfmt="\t%-11s %s\n"

	exec >&2
	if [ "$1" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@"
	fi

	printf "Usage: %s [OPTIONS]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-C ip" "Client filter (IPv4 only)."
	printf "$optfmt" "-c" "View read/write activity by client IP."
	printf "$optfmt" "-h" "Print usage statement and exit."
	printf "$optfmt" "-i sec" \
		"Set interval seconds. Default $DEFAULT_INTERVAL."
	printf "$optfmt" "" "Accepts decimal point on seconds."
	printf "$optfmt" "-J" "Output most JSON data. Same as \`-jcgsu'."
	printf "$optfmt" "-j" "Output JSON formatted data."
	printf "$optfmt" "-N num" "Perform num samples and exit."
	printf "$optfmt" "-n" "Do not attempt to map uid/gid/ip to names."
	printf "$optfmt" "-r" "Raw view. Do not format output of bpftrace."
	printf "$optfmt" "-S ip" "Server filtter (IPv4 only)."
	printf "$optfmt" "-s" "View read/write activity by server IP."
	printf "$optfmt" "-U user" "User filter (name or id)."
	printf "$optfmt" "-u" "View read/write activity by user (default)."
	printf "$optfmt" "-v" "Print version and exit."
	printf "$optfmt" "-w" "Wide view. Maximize width of first column."

	die
}

run_beegfs_ctl()
{
	if [ "$VIEW_CLIENT" ]; then
		set -- --clientstats --rwunit=B "$@"
	elif [ "$VIEW_SERVER" ]; then
		set -- --serverstats --perserver "$@"
	elif [ "$VIEW_USER" ]; then
		set -- --userstats --rwunit=B "$@"
	fi
	exec beegfs-ctl "$@" --names --nodetype=storage --interval=$INTERVAL
}

isint()
{
	local arg="${1#-}"
	[ "${arg:-x}" = "${arg%[!0-9]*}" ]
}

isip()
{
        local IFS=. noctets=0 octet
        for octet in $1; do
                [ "$octet" ] || return 2
                isint "$octet" || return 3
                [ $octet -ge 0 ] || return 4
                [ $octet -gt 255 ] && return 5
                noctets=$(( $noctets + 1 ))
        done
        [ $noctets -eq 4 ]
}

checkip()
{
	isip "$1"
	case $? in
	1) die "-C argument \`%s' too many dots" "$1" ;;
	2) die "-C argument \`%s' missing octet" "$1" ;;
	3) die "-C argument \`%s' bad octet" "$1" ;;
	4) die "-C argument \`%s' negative octet" "$1" ;;
	5) die "-C argument \`%s' too big octet" "$1" ;;
	esac
}

atoi()
{
	local __addr="$1" __var_to_set="$2" __num=0
	if isip "$__addr"; then
		local IFS=.
		set -- $__addr
		__num=$(( ($1 << 24) + ($2 << 16) + ($3 << 8) + $4 ))
	fi
	eval $__var_to_set=$__num
}

############################################################ MAIN

#
# Parse command-line options
#
while getopts chi:JjN:nrsuvw flag; do
	case "$flag" in
	c) VIEW=CLIENT VIEW_CLIENT=1 ;;
	i) INTERVAL="$OPTARG" ;;
	J) OUTPUT_JSON=1 VIEW_CLIENT=1 VIEW_SERVER=1 VIEW_USER=1 ;;
	j) OUTPUT_JSON=1 ;;
	N) [ "$OPTARG" ] || usage "-N option requires an argument" # NOTREACHED
		NSAMPLES="$OPTARG" ;;
	n) NO_NAMES=1 ;;
	r) RAW_VIEW=1 ;;
	s) VIEW=SERVER VIEW_SERVER=1 ;;
	u) VIEW=USER VIEW_USER=1 ;;
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	w) WIDE_VIEW=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Check command-line arguments
#
[ $# -eq 0 ] || usage "Too many arguments" # NOTREACHED

#
# Silently ignore previous view options unless JSON output
#
[ "$VIEW" ] || VIEW=USER VIEW_USER=1
if [ ! "$OUTPUT_JSON" ]; then
	case "$VIEW" in
	CLIENT) VIEW_SERVER= VIEW_USER= ;;
	SERVER) VIEW_CLIENT= VIEW_USER= ;;
	USER) VIEW_CLIENT= VIEW_SERVER= ;;
	esac
fi

#
# Validate `-i sec' option
#
case "$INTERVAL" in
"") usage "missing -i argument" ;; # NOTREACHED
0) die "-i sec must be non-zero" ;;
*[!0-9.]*|*.*.*|.) die "-i argument must be a number" ;;
*.*)
	INTERVAL_SECONDS=$INTERVAL
	ms=$( echo "$INTERVAL * 1000" | bc )
	ms="${ms%%.*}"

	#
	# If, after multiplying by 1000 to convert sec to msec,
	# the leading [non-decimal] digit is either missing or zero,
	# the input was too small to produce timing of at least 1 msec
	#
	case "$ms" in
	""|0) die "-i argument must be at least 0.001" ;;
	esac

	INTERVAL_PROBE=interval:ms:$ms
	;;
*)
	INTERVAL_SECONDS=$INTERVAL
	INTERVAL_PROBE=interval:s:$INTERVAL_SECONDS
esac

#
# Validate `-N num' option
#
case "$NSAMPLES" in
0) die "-i sec must be non-zero" ;;
*[!0-9]*) die "-i argument must be a positive integer" ;;
esac

#
# Get terminal size
#
size=$( stty size 2> /dev/null )
if [ "$size" ]; then
	cols="${size#*[$IFS]}"
	rows="${size%%[$IFS]*}"
	case "$rows$cols" in
	*[!0-9]*)
		cols=80
		rows=24
		;;
	esac
fi

#
# Trace BeeGFS I/O
#
run_beegfs_ctl | awk \
	-v cols=$cols \
	-v interval=$INTERVAL_SECONDS \
	-v no_names=${NO_NAMES:-0} \
	-v nsamples=${NSAMPLES:-0} \
	-v output_json=${OUTPUT_JSON:-0} \
	-v raw_view=${RAW_VIEW:-0} \
	-v rows=$rows \
	-v view="$VIEW" \
	-v wide_view=${WIDE_VIEW:-0} \
	'####################################### BEGIN

	BEGIN {
		samples_left = nsamples
		waiting = "Waiting for bpftrace to initialize ..."

		# Obtain awk pid
		(cmd = "echo $PPID") | getline apid
		close(cmd)

		# Obtain sh pid
		getline stat < (file = sprintf("/proc/%d/stat", apid))
		close(file)
		split(stat, st)
		spid = st[4]

		# Obtain bpftrace pid
		(cmd = sprintf("pgrep -P %d bpftrace", spid)) | getline bpid
		close(cmd)

		if (wide_view) {
			vsz = cols - 36 - 4 - 21 # Maximize view column
				# 36 = 3 x %12s
				#  4 = number of spaces
				# 21 = minimum bar size
		} else {
			vsz = 15 # Maximize bar column
		}

		fmt = "%-"vsz"s %12s %12s %*s|%-*s %-12s\n"
		bar_size = (cols - vsz - 36 - 4 - 1) / 2
			# 36 = 3 x %12s
			#  4 = number of spaces
			#  1 = balance odd cols
		fmtsz = vsz + 36 + 4 + int(bar_size) * 2 + 1
			# 36 = 3 x %12s
			#  4 = number of spaces
			#  1 = "|" between bars

		if (!raw_view) {
			clear_buffer()
			buffer_add_header()
			if (!output_json) {
				buffer_add(waiting "\n")
				print_buffer()
			}
			if (!no_names) load_files()
		}
	}

	######################################## FUNCTIONS

	function buffer_add(text) { BUFFER = BUFFER text }
	function print_buffer() { printf "%s", BUFFER }

	function clear_data()
	{
		delete client_keys
		delete file_keys
		delete group_keys
		delete server_keys
		delete user_keys

		nviews = 0
		delete map_views
		delete view_list

		delete map_key_read
		delete map_key_write
		delete map_view_read
		delete map_view_write
	}

	function clear_buffer()
	{
		clear_data()

		BUFFER = ""
		if (!output_json)
			buffer_add(sprintf("\033[H\033[J"))
	}

	function buffer_add_header()
	{
		if (output_json) return
		buffer_add(sprintf("Interval: %-*s %31s\n",
			fmtsz - 9 - 2 - 31,
			sprintf("%.3f", interval) "s",
			strftime("%c", systime())))
				#  9 = "Interval:"
				#  2 = number of spaces
				# 31 = %31s = date
		buffer_add(sprintf("\033[7;1m" fmt "\033[27;22m", view,
			"TOTAL", "WRITE(IN)", bar_size, "", bar_size, "",
			"READ(OUT)"))
	}

	function load_files()
	{
	}

	function load_keys(map_view,        map_key)
	{
		delete _keys
		if (map_view == "client") for (map_key in client_keys)
			_keys[map_key] = client_keys[map_key]
		else if (map_view == "file") for (map_key in file_keys)
			_keys[map_key] = file_keys[map_key]
		else if (map_view == "group") for (map_key in group_keys)
			_keys[map_key] = group_keys[map_key]
		else if (map_view == "server") for (map_key in server_keys)
			_keys[map_key] = server_keys[map_key]
		else if (map_view == "user") for (map_key in user_keys)
			_keys[map_key] = user_keys[map_key]
	}

	function parse_map()
	{
		if (!match($0, /^@[^\[]*\[/)) return 0
		map_name = substr($0, RSTART + 1, RLENGTH - 2)
		map_view = substr(map_name, 4)
		map_op = substr(map_name, 1, 2) # rd/wr

		if (!match($0, /\[.*\]:/)) return 0
		map_key = substr($0, RSTART + 1, RLENGTH - 3)
		map_value = $NF

		if (map_view == "user" || map_view == "group") {
			map_key = int(map_key)
		}

		if (!(map_view in map_views)) {
			map_views[map_view]
			view_list[++nviews] = map_view
		}
		if (map_view == "client") client_keys[map_key]
		else if (map_view == "file") file_keys[map_key]
		else if (map_view == "group") group_keys[map_key]
		else if (map_view == "server") server_keys[map_key]
		else if (map_view == "user") user_keys[map_key]

		if (map_op == "rd") {
			map_view_read[map_view] += map_value
			map_key_read[map_view, map_key] = map_value
		} else { # wr
			map_view_write[map_view] += map_value
			map_key_write[map_view, map_key] = map_value
		}

		return 1
	}

	function humanize(value,        raw, n, suffix, suffixes)
	{
		raw = value
		n = split(",K,M,G,T,E", suffixes, /,/)
		for (suffix = 1; suffix <= n; suffix++) {
			if (int(value) < 1024) break
			value /= 1024
		}
		if (v ~ /\./) sub(/\.?0+$/, "", v)
		value = sprintf("%'"'"'.2f%sB/s", value, suffixes[suffix])
		return value
	}

	function _asort(src, dest,        k, nitems, i, val)
	{
		k = nitems = 0
		for (i in src) dest[++nitems] = src[i]
		for (i = 1; i <= nitems; k = i++) {
			val = dest[i]
			while ((k > 0) && (dest[k] > val)) {
				dest[k+1] = dest[k]; k--
			}
			dest[k+1] = val
		}
		return nitems
	}

	function json_add(json, key, format, value)
	{
		return json (length(json) < 2 ? "" : ",") \
			sprintf("\"%s\":" format, key, value)
	}

	function json_add_str(json, key, value)
	{
		return json_add(json, key, "\"%s\"", value)
	}

	function json_add_uint(json, key, value)
	{
		return json_add(json, key, "%u", value)
	}

	function json_add_prec(json, key, precision, value,        x)
	{
		x = sprintf("%.*f", precision, value)
		if (x ~ /\./) sub(/\.?0+$/, "", x)
		return json_add(json, key, "%s", x)
	}

	function json_add_float(json, key, value)
	{
		return json_add_prec(json, key, 12, value)
	}

	function sample_check()
	{
		if (nsamples > 0 && --samples_left < 1) {
			system(sprintf("kill %d > /dev/null 2>&1", bpid))
			exit
		}
	}

	function process_view(curview,
		cred_read, read_bar, read_bar_pct, read_rate, read_total,
		cred_write, write_bar, write_bar_pct, write_rate, write_total,
		i, n, r, v, _keys_sorted, table_rows, cred)
	{
		read_total = map_view_read[curview]
		read_rate = read_total / interval
		write_total = map_view_write[curview]
		write_rate = write_total / interval

		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out,
				"ident", "total_" curview)
			json_out = json_add_uint(json_out,
				"total_bytes", read_total + write_total)
			json_out = json_add_float(json_out,
				"total_rate", read_rate + write_rate)
			json_out = json_add_uint(json_out,
				"read_bytes", read_total)
			json_out = json_add_float(json_out,
				"read_rate", read_rate)
			json_out = json_add_uint(json_out,
				"write_bytes", write_total)
			json_out = json_add_float(json_out,
				"write_rate", write_rate)
			buffer_add("{" json_out "}\n")
		} else {
			read_bar = ""
			write_bar = ""
			buffer_add(sprintf(fmt, "total",
				humanize(write_rate + read_rate),
				humanize(write_rate), bar_size, write_bar,
				bar_size, read_bar, humanize(read_rate)))
		}

		#
		# Decorate combined read/write values
		#
		load_keys(curview)
		for (cred in _keys) {
			v = int(map_key_read[curview, cred]) + \
				int(map_key_write[curview, cred])
			_keys[cred] = sprintf("%99d %s", v, cred)
		}

		#
		# Print subtotals
		#
		r = 1
		n = _asort(_keys, _keys_sorted)
		table_rows = output_json ? n : rows - 4
		for (i = n; i >= 1 && r++ <= table_rows; i--) {
			cred = _keys_sorted[i]
			sub(/^ *[^ ]+ +/, "", cred) # Undecorate

			cred_read = map_key_read[curview, cred]
			cred_write = map_key_write[curview, cred]

			read_rate = cred_read / interval
			if (read_total > 0)
				read_bar_pct = cred_read / read_total
			else
				read_bar_pct = 0
			read_bar_size = bar_size * read_bar_pct
			read_bar = sprintf("%*s", read_bar_size, "")
			gsub(/ /, "=", read_bar)
			sub(/.$/, ">", read_bar)

			write_rate = cred_write / interval
			if (write_total > 0)
				write_bar_pct = cred_write / write_total
			else
				write_bar_pct = 0
			write_bar_size = bar_size * write_bar_pct
			write_bar = sprintf("%*s", write_bar_size, "")
			gsub(/ /, "=", write_bar)
			sub(/^./, "<", write_bar)

			if (!no_names) {
				if (!output_json && length(cred) > vsz) {
					if (curview == "file")
						cred = "..." substr(cred,
							length(cred) - vsz + 4)
					else
						cred = substr(cred, 1, vsz)
				}
			}

			if (output_json) {
				json_out = ""
				json_out = json_add_uint(json_out, "time", tm)
				json_out = json_add_str(json_out,
					"ident", curview)
				json_out = json_add_str(json_out, curview, cred)
				json_out = json_add_uint(json_out,
					"total_bytes", cred_read + cred_write)
				json_out = json_add_float(json_out,
					"total_rate", read_rate + write_rate)
				json_out = json_add_uint(json_out,
					"read_bytes", cred_read)
				json_out = json_add_float(json_out,
					"read_rate", read_rate)
				json_out = json_add_uint(json_out,
					"write_bytes", cred_write)
				json_out = json_add_float(json_out,
					"write_rate", write_rate)
				buffer_add("{" json_out "}\n")
			} else {
				buffer_add(sprintf(fmt, cred,
					humanize(write_rate + read_rate),
					humanize(write_rate), bar_size,
					write_bar, bar_size, read_bar,
					humanize(read_rate)))
			}
		}
		if (i > 0) buffer_add(sprintf("(%d more) ... ", i))
	}

	######################################## MAIN

	raw_view {
		print

		# Exit if no more samples desired
		if (/^---$/) sample_check()

		next
	}

	/^===$/ {
		read_total = write_total = 0
		clear_buffer()
		buffer_add_header()
		next
	}

	sub(/^info\|/, "") {
		if (!output_json) print
		next
	}

	/^@/ { parse_map() }

	/^---$/ {
		tm = systime()

		#
		# Process each requested view
		#
		for (v = 1; v <= nviews; v++)
			process_view(view_list[v])

		#
		# Dump information
		#
		print_buffer()
		clear_data()
		sample_check() # Exit if no more samples desired
	}

	############################################################
	# END
	############################################################
' # END-QUOTE

exit $SUCCESS

################################################################################
# END
################################################################################
