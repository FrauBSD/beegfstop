#!/bin/sh
# vi: set ft=sh noet ts=8 sw=8 :: Vi/ViM
############################################################ IDENT(1)
#
# $Title: Script to generate top-like statistics for BeeGFS I/O $
# $Copyright: 2020 Devin Teske. All rights reserved. $
# $FrauBSD: beegfstop/beegfstop 2020-07-10 15:39:47 -0700 freebsdfrau $
#
############################################################ INFORMATION
#
# In beegfstop, a ``view'' is the user's choice between -c, -s, or -u.
# For example, `-u' asks beegfstop to display the ``user view'' where statistics
# displayed are on a per-user basis.
#
# The ``mode'' is the user's choice between viewing data input/output (this is
# the default) and metadata operations (-m).
#
# The code is broken down into:
# 	- Mode selection (user choice)
# 	- View selection (user choice)
# 	- Inspection of running system
# 	- beegfs-ctl execution
# 	- awk to process beegfs-ctl output
#
# Code navigating Search Terms/ST:
# 	BEEGFSCTL	Start of beegfs-ctl
# 	CTLDATA		beegfs-ctl data generation and processing
# 	JSONDATA	JSON data generation
# 	OPS		Data operations (read vs write)
# 	POST		beegfs-ctl post-processor (awk)
# 	PRE		Start of pre-processor (sh)
# 	SORTING		Sort routines
# 	VIEWDATA	View data generation
# 	VIEWS		View processing
#
############################################################ DEFAULTS

DEFAULT_INTERVAL=2 # seconds

#
# Sorting choices (case-insensitive):
# 	total (in any mode; default sort column)
# 	read write in out (without `-m')
# 	stat statLI (with `-m' and either `-u' or `-c')
# 	reqs qlen (with `-m' and `-s')
# 	bsy (with `-M bsy' and `-s')
#
DEFAULT_SORT=total

############################################################ GLOBALS

VERSION='$Version: 7.0.3 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
COLOR=1					# -C
DEBUGGER=				# -D
INTERVAL=$DEFAULT_INTERVAL		# -i sec
META_METRIC=				# -M metric
MODE=data				# vs `meta' (-m)
NO_NAMES=				# -n
NSAMPLES=				# -N num
OUTPUT_JSON=				# -j
RAW_VIEW=				# -r
REDACT=${BEEGFSTOP_REDACT:+1}		# -R
SHOW_ZERO_VALUES=			# -V
SHOW_BASIC=				# -b
SORT=$DEFAULT_SORT			# -k col
VIEW_CLIENT=				# -c
VIEW_SERVER=				# -s
VIEW_USER=				# -u (default)
WIDE_VIEW=				# -w

#
# Miscellaneous
#
CONS=1
[ -t 1 ] || CONS= COLOR= # stdout is not a tty
MODE_DATA=
MODE_META=
VIEW=

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

usage()
{
	local fmt="$1"
	local optfmt="\t%-12s %s\n"

	exec >&2
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@"
	fi

	printf "Usage: %s [-c|-s|-u] [OPTIONS]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-b" "Show basic counts instead of rates."
	printf "$optfmt" "-C" "Always enable color."
	printf "$optfmt" "-c" "View read/write activity by client."
	printf "$optfmt" "-D" "Enable debugger."
	printf "$optfmt" "-h" "Print usage statement and exit."
	printf "$optfmt" "-i sec" \
		"Set interval seconds. Default \`$DEFAULT_INTERVAL'."
	printf "$optfmt" "-j" "Output JSON formatted data."
	printf "$optfmt" "-k col" "Sort column (default \`$DEFAULT_SORT')."
	printf "$optfmt" "-M metric" "Show metadata metric."
	printf "$optfmt" "-m" "Show metadata statistics."
	printf "$optfmt" "-N num" "Perform num samples and exit."
	printf "$optfmt" "-n" "Do not attempt to map uid/gid/ip to names."
	printf "$optfmt" "-o" "Force non-console output."
	printf "$optfmt" "-R" "Redact potentially sensitive information."
	printf "$optfmt" "-r" "Raw view. Do not format output of bpftrace."
	printf "$optfmt" "-s" "View read/write activity by server."
	printf "$optfmt" "-u" "View read/write activity by user (default)."
	printf "$optfmt" "-V" "Show zero-values. Only applies to \`-j'."
	printf "$optfmt" "-v" "Print version and exit."
	printf "$optfmt" "-w" "Wide view. Maximize width of first column."

	die
}

run_beegfs_ctl()
{
	case "$MODE" in
	data) set -- --nodetype=storage "$@" ;;
	meta) set -- --nodetype=meta "$@" ;;
	esac
	if [ "$VIEW_CLIENT" ]; then
		[ "$NO_NAMES" ] || set -- --names "$@"
		set -- --clientstats ${MODE_DATA:+--rwunit=B} "$@"
		set -- --interval=$INTERVAL --perinterval "$@"
	elif [ "$VIEW_SERVER" ]; then
		[ "$NO_NAMES" ] || set -- --names "$@"
		set -- --serverstats --perserver --interval=1 "$@"
	elif [ "$VIEW_USER" ]; then
		# NB: --names has a bug; we need to avoid using it
		# NB: UID->name mapping/caching done in post-processing
		set -- --userstats ${MODE_DATA:+--rwunit=B} "$@"
		set -- --interval=$INTERVAL --perinterval "$@"
	fi
	expect -f- strace -e trace=poll beegfs-ctl "$@" <<-'END-EXPECT' | awk '
		!/^(poll\(|\))/ { print; fflush(); next}
		sub(/^poll\(.*fd=0.*/, "---") { print; fflush() }
	' # END-AWK
		spawn {*}$argv
		while (1) {
			expect {
				-re "fd=0" { send_user "\n" }
				eof { exit 0 }
			}
		}
	END-EXPECT
}

#
# ST: CALLS
#

send_user()
{
	local type="$1"
	shift 1 # type
	printf "%s|%s\n" "$type" "$*"
}

resize()
{
	local size
	if [ -e /dev/tty ]; then
		size=$( { stty size < /dev/tty; } 2> /dev/null )
	else
		size=$( stty size 2> /dev/null )
	fi
	send_user resize "${size:-24 80}"
}

############################################################ MAIN

#
# Process command-line options
#
while getopts bCcDhi:jk:M:mN:noRrsuVvw flag; do
	case "$flag" in
	b) SHOW_BASIC=1 ;;
	C) COLOR=1 ;;
	c) VIEW=CLIENT VIEW_CLIENT=1 ;;
	D) DEBUGGER=$(( $DEBUGGER + 1 )) ;;
	i) INTERVAL="$OPTARG" ;;
	j) OUTPUT_JSON=1 ;;
	k) SORT="$OPTARG" ;;
	M) META_METRIC="$OPTARG" MODE=meta ;;
	m) MODE=meta ;;
	N) [ "$OPTARG" ] || usage "-N option requires an argument" # NOTREACHED
		NSAMPLES="$OPTARG" ;;
	n) NO_NAMES=1 ;;
	o) CONS= COLOR= ;;
	R) REDACT=1 ;;
	r) RAW_VIEW=1 ;;
	s) VIEW=SERVER VIEW_SERVER=1 ;;
	u) VIEW=USER VIEW_USER=1 ;;
	V) SHOW_ZERO_VALUES=1 ;;
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	w) WIDE_VIEW=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Process command-line arguments
#
[ $# -eq 0 ] || usage "Too many arguments" # NOTREACHED

#
# Prevent non-functional option combinations
#
if [ "$META_METRIC" ]; then
	[ ! "$OUTPUT_JSON" ] || die "-M metric cannot be combined with -j"
fi
if [ "$SHOW_BASIC" ]; then
	[ ! "$OUTPUT_JSON" ] || die "-b cannot be combined with -j"
fi
if [ "$SHOW_ZERO_VALUES" ]; then
	[ "$OUTPUT_JSON" ] || die "-V only applies to -j"
fi

#
# Silently ignore previous view options unless JSON output
#
[ "$VIEW" ] || VIEW=USER VIEW_USER=1
if [ ! "$OUTPUT_JSON" ]; then
	case "$VIEW" in # ST: VIEWS
	CLIENT) VIEW_SERVER= VIEW_USER= ;;
	SERVER) VIEW_CLIENT= VIEW_USER= ;;
	USER) VIEW_CLIENT= VIEW_SERVER= ;;
	esac
fi

#
# Validate `-i sec' option
#
case "$INTERVAL" in
"") usage "missing -i argument" ;; # NOTREACHED
0) die "-i sec must be non-zero" ;;
*[!0-9]*) die "-i sec must be a number" ;;
esac

#
# Validate `-M metric' option
#
if [ "$VIEW_USER" -o "$VIEW_CLIENT" ]; then
	case "$META_METRIC" in
	"") META_METRIC=stat ;;
	[Ss][Tt][Aa][Tt]|[Ss][Tt][Aa][Tt][Ll][Ii]) META_METRIC=stat ;;
	[Cc][Rr][Ee][Aa][Tt][Ee]) META_METRIC=create ;;
	[Cc][Rr][Ee][Aa][Tt][Ee][Ll][Ii]) META_METRIC=create ;;
	[Rr][Mm]|[Rr][Mm][Dd][Ii][Rr]|[Uu][Nn][Ll][Nn][Kk]) META_METRIC=rm ;;
	[Ff][Dd]|[Oo][Pp][Ee][Nn]|[Cc][Ll][Oo][Ss][Ee]) META_METRIC=fd ;;
	*) die "-M metric must be one of (%s):\n\t%s\n\t%s\n\t%s\n\t%s" \
		"case-insensitive" \
		"\`stat' or \`statLI' (default pair to show)" \
		"\`create' or \`createLI'" \
		"\`rm' or \`rmdir' or \`unlink'" \
		"\`fd' or \`open' or \`close'"
	esac
elif [ "$VIEW_SERVER" ]; then
	case "$META_METRIC" in
	"") META_METRIC=bsy ;;
	[Bb][Ss][Yy]) META_METRIC=bsy ;;
	[Qq][Ll][Ee][Nn]) META_METRIC=qlen ;;
	*) die "-M metric must be one of (%s):\n\t%s" \
		"case-insensitive" \
		"\`bsy' or \`qlen'"
	esac
fi

#
# Validate `-k col' option
# ST: SORTING
#
if [ "$MODE" = data ]; then
	case "$SORT" in
	"") usage "missing -k argument" ;; # NOTREACHED
	[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
	[Rr][Ee][Aa][Dd]|[Oo][Uu][Tt]) SORT=read ;; # READ(OUT)
	[Ww][Rr][Ii][Tt][Ee]|[Ii][Nn]) SORT=write ;; # WRITE(IN)
	*) die "-k col must be one of: total read write in out"
	esac
elif [ "$MODE" = meta ]; then
	if [ "$VIEW_USER" -o "$VIEW_CLIENT" ]; then
		if [ "$META_METRIC" = create ]; then
			case "$SORT" in
			"") usage "missing -k argument" ;; # NOTREACHED
			[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
			[Cc][Rr][Ee][Aa][Tt][Ee]) SORT=create ;; # CREATE
			[Cc][Rr][Ee][Aa][Tt][Ee][Ll][Ii])
				SORT=createLI ;; # CREATELI
			*) die "-k col must be one of: total create createLI"
			esac
		elif [ "$META_METRIC" = rm ]; then
			case "$SORT" in
			"") usage "missing -k argument" ;; # NOTREACHED
			[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
			[Rr][Mm][Dd][Ii][Rr]) SORT=rmdir ;; # RMDIR
			[Uu][Nn][Ll][Nn][Kk]) SORT=unlnk ;; # UNLNK
			*) die "-k col must be one of: total rmdir unlnk"
			esac
		elif [ "$META_METRIC" = fd ]; then
			case "$SORT" in
			"") usage "missing -k argument" ;; # NOTREACHED
			[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
			[Oo][Pp][Ee][Nn]) SORT=open ;; # OPEN
			[Cc][Ll][Oo][Ss][Ee]) SORT=close ;; # CLOSE
			*) die "-k col must be one of: total open close"
			esac
		else
			case "$SORT" in
			"") usage "missing -k argument" ;; # NOTREACHED
			[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
			[Ss][Tt][Aa][Tt]) SORT=stat ;; # STAT
			[Ss][Tt][Aa][Tt][Ll][Ii]) SORT=statLI ;; # STATLI
			*) die "-k col must be one of: total stat statLI"
			esac
		fi
	elif [ "$VIEW_SERVER" ]; then
		if [ "$META_METRIC" = bsy ]; then
			case "$SORT" in
			"") usage "missing -k argument" ;; # NOTREACHED
			[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
			[Rr][Ee][Qq][Ss]) SORT=reqs ;; # REQS
			[Bb][Ss][Yy]) SORT=bsy ;; # BSY
			*) die "-k col must be one of: total reqs bsy"
			esac
		else
			case "$SORT" in
			"") usage "missing -k argument" ;; # NOTREACHED
			[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
			[Rr][Ee][Qq][Ss]) SORT=reqs ;; # REQS
			[Qq][Ll][Ee][Nn]) SORT=qlen ;; # QLEN
			*) die "-k col must be one of: total reqs qlen"
			esac
		fi
	fi
fi

#
# Process `-m' option
#
case "$MODE" in
data) MODE_DATA=1 MODE_META= ;;
meta) MODE_META=1 MODE_DATA= ;;
esac

#
# Validate `-N num' option
#
case "$NSAMPLES" in
*[!0-9]*) die "-N num must be a positive integer" ;;
esac

#
# Get terminal size
#
size=$( resize )
size="${size#*|}"
if [ "$size" ]; then
	cols="${size#*[$IFS]}"
	rows="${size%%[$IFS]*}"
fi
case "$rows$cols" in
""|*[!0-9]*)
	cols=80
	rows=24
	;;
esac

#
# Run script
# ST: PRE
#
{
	trap resize WINCH # ST: SIGWINCH

	#
	# Start background beegfs-ctl
	# ST: BEEGFSCTL
	#
	run_beegfs_ctl &
	bpid=$!

	#
	# Wait on background (beegfs-ctl) child
	#
	status_collected=
	while kill -0 $bpid > /dev/null 2>&1; do
		wait > /dev/null 2>&1 # Collect exit status
		[ "$status_collected" ] || status_collected=$?
	done
	echo EXIT:$status_collected # Send status to post-processor

} | awk -v color=${COLOR:-0} \
	-v cols=$cols \
	-v cons=${CONS:-0} \
	-v data_mode=${MODE_DATA:-0} \
	-v debugger=${DEBUGGER:-0} \
	-v interval=$INTERVAL \
	-v meta_metric="$META_METRIC" \
	-v meta_mode=${MODE_META:-0} \
	-v mode="$MODE" \
	-v no_names=${NO_NAMES:-0} \
	-v nsamples=${NSAMPLES:--1} \
	-v output_json=${OUTPUT_JSON:-0} \
	-v raw_view=${RAW_VIEW:-0} \
	-v redact=${REDACT:-0} \
	-v rows=$rows \
	-v show_basic=${SHOW_BASIC:-0} \
	-v show_zero_values=${SHOW_ZERO_VALUES:-0} \
	-v sort="$SORT" \
	-v stderr=/dev/stderr \
	-v uname=$( uname ) \
	-v view="$VIEW" \
	-v wide_view=${WIDE_VIEW:-0} \
	'####################################### BEGIN

	# ST: POST

	BEGIN {
		debug2("Terminal size (rows, cols) = (%d, %d)", rows, cols)
		debug1("Sorting by %s", sort)

		exit_status = 0 # SUCCESS
		time_delta = 0 # Calculated
		if (view == "SERVER") {
			in_summary = 0
			samples_left = nsamples
			subsamples_left = interval
		} else {
			in_summary = 1
			samples_left = ++nsamples
		}
		tm = _systime()

		inv	= "\033[7m"
		noinv	= "\033[27m"
		bold    = "\033[1m"
		nobold  = "\033[22m"
		red     = "\033[31m"
		green   = "\033[32m"
		yellow  = "\033[33m"
		cyan    = "\033[36m"
		fgreset = "\033[39m"

		# Obtain current process (awk) pid
		(cmd = "echo $PPID") | getline apid
		close(cmd)

		# Obtain parent process (sh) pid
		getline stat < (file = sprintf("/proc/%d/stat", apid))
		close(file)
		split(stat, st)
		spid = st[4]

		# Obtain parent process (sh) name
		getline stat < (file = sprintf("/proc/%d/stat", spid))
		close(file)
		split(stat, st)
		comm = st[2]
		if (match(comm, /^\(.*\)$/))
			comm = substr(comm, 2, length(comm) - 2)

		# Obtain child (sh) pid
		(cmd = sprintf("pgrep -P %d %s", spid, comm)) | getline cpid
		close(cmd)

		# Obtain beegfs-ctl pid
		(cmd = sprintf("pgrep -P %d", cpid)) | getline spid
		close(cmd)
		(cmd = sprintf("pgrep -P %d expect", spid)) | getline epid
		close(cmd)
		(cmd = sprintf("pgrep -P %d strace", epid)) | getline spid
		close(cmd)
		(cmd = sprintf("pgrep -P %d beegfs-ctl", spid)) | getline bpid
		close(cmd)

		if (!raw_view) {
			clear_data()
			resize()
		}

		if (redact) {
			m = "^(USER|total|"
			if ((u = ENVIRON["USER"]) != "")
				m = m u "|"
			if ((s = ENVIRON["SUDO_USER"]) != "" && s != u)
				m = m s "|"
			cmd = "getent passwd 2> /dev/null"
			while (cmd | getline > 0) {
				if (split($0, f, /:/) < 3) continue
				if (f[3] > 1024 && f[3] !~ /^6553[456]$/)
					continue
				m = m f[1] "|"
			}
			close(cmd)
			m = m "\\*)$"
			unredacted_users = m

			unredacted_clients = "^(CLIENT|total|\\*)$"
			unredacted_servers = "^(SERVER|total|\\*)$"
		}

		# Declare arrays
		delete labels
		delete lorder
		delete uid2name_cache

		#
		# ST: VIEWS
		#

		if (view == "SERVER") {
			labels["name"] = no_names ? 1 : "NF"
		} else {
			labels["name"] = 1
		}

		o = 0
		if (data_mode) {
			kv_map4("read", "B-rd",
				"read_bytes", 3, "read_rate")
			kv_map4("write", "B-wr",
				"write_bytes", 2, "write_rate")

			lorder[++o] = "read"
			lorder[++o] = "write"
			kv_ord(o, lorder)

			label_map(1, "read", "READ(OUT)")
			label_map(2, "write", "WRITE(IN)")

			labels["combined_rate"] = "total_rate"
			labels["combined_total"] = "total_bytes"
		} else if (meta_mode && view == "SERVER") {
			kv_map("reqs", 2)
			kv_map("qlen", 3)
			kv_map("bsy", 4)

			lorder[++o] = "reqs"
			lorder[++o] = "qlen"
			lorder[++o] = "bsy"
			kv_ord(o, lorder)

			label_map(1, meta_metric)
			label_map(2, "reqs")
		} else {
			lorder[++o] = "stat"
			lorder[++o] = "statLI"
			lorder[++o] = "create"
			lorder[++o] = "createLI"
			lorder[++o] = "rmdir"
			lorder[++o] = "unlnk"
			lorder[++o] = "open"
			lorder[++o] = "close"
			kv_ord(o, lorder)

			for (n = 1; n <= o; n++)
				kv_map(lorder[n])

			if (meta_metric == "stat") {
				label_map(1, "statLI")
				label_map(2, "stat")
			} else if (meta_metric == "create") {
				label_map(1, "createLI")
				label_map(2, "create")
			} else if (meta_metric == "rm") {
				label_map(1, "unlnk")
				label_map(2, "rmdir")
			} else if (meta_metric == "fd") {
				label_map(1, "close")
				label_map(2, "open")
			}
		}

		delete lorder # NB: See json_field_order set by kv_ord()
		n = o = 0 # NB: See njson_fields set by kv_ord()
	}

	######################################## FUNCTIONS

	#
	# OS compatibility
	#

	function _systime(        cmd, tm) {
		if (uname == "Linux") return systime()
		(cmd = "date +%s") | getline tm
		close(cmd)
		return tm
	}

	#
	# Debugging
	#

	function debug1(fmt,a1) { dprint(sprintf(fmt, a1)) }
	function debug2(fmt,a1,a2) { dprint(sprintf(fmt, a1, a2)) }
	function debug3(fmt,a1,a2,a3) { dprint(sprintf(fmt, a1, a2, a3)) }

	function dprint(str)
	{
		if (debugger == 0) return
		print str > stderr
		fflush(stderr)
	}

	#
	# Data display
	#

	function get_random(len,        c, n, r, rdata, rfile, rlen)
	{
		if (len < 1) return ""
		rlen = 0
		rdata = ""
		rfile = "/dev/urandom"
		while (length(rdata) < len && getline r < rfile > 0) {
			for (n = split(r, c, ""); n >= 1; n--) {
				if (c[n] !~ /[\x41-\x5a]/) continue
				rdata = rdata c[n]
				if (++rlen == len) break
			}
		}
		close(rfile)
		return rdata
	}

	function resize(        dsz, vsz, vsz_fixed, bar_size_fixed,
		bar_size_fixed_max, bar_size_fixed_min, bar_min1, bar_min2,
		vsz_cols1, vsz_cols2, vsz_max, vsz_min, wv)
	{
		if (output_json) return

		#
		# Calculate columns and column widths
		# ST: VIEWS
		#
		# NB: bar_size = size of bar column (if shown)
		# NB: dsz = size of data columns
		# NB: vsz = size of VIEW column ("view size")
		#
		# If given -w (wide view) make bar_size fixed-width and
		# vsz variable-width.
		#
		# Without -w, make vsz fixed-width and bar_size variable.
		#

		wv = wide_view

		show_bar_column = 1
		show_data_columns = 1

		vsz_min = length(view)
		vsz_max = 15

		dsz = show_basic ? 10 : 12
		bar_size_fixed_max = 21
		bar_size_fixed_min = 11

		#
		# Calculate minimum terminal width required (bar_min1)
		# to display small bar (bar_size_fixed_min) and also
		# minimum terminal width required (bar_min2) to display
		# larger bar (bar_size_fixed_max).
		#
		bar_min1 = 0
		bar_min1 += vsz_min + 1 # VIEW + space
		bar_min1 += dsz + 1 # TOTAL + space
		vsz_cols2 = bar_min1
		bar_min1 += dsz + 1
			# WRITE(IN)/STAT/CREATE/RMDIR/OPEN/REQS + space
		vsz_cols1 = bar_min2 = bar_min1
		bar_min1 += bar_size_fixed_min + 1 # small bar + space
		bar_min2 += bar_size_fixed_max + 1 # bigger bar + space
		# READ(OUT)/STATLI/CREATELI/UNLNK/CLOSE/QLEN/BSY
		bar_min1 += dsz
		bar_min2 += dsz
		vsz_cols1 += dsz

		#
		# Calculate fixed bar width based on terminal width
		# NB: Only used in wide-view (-w)
		# NB: If terminal is too narrow, disable bar/columns
		#
		if (cols >= bar_min2) {
			bar_size_fixed = bar_size_fixed_max
		} else if (cols >= bar_min1) {
			bar_size_fixed = bar_size_fixed_min
		} else {
			show_bar_column = 0
			bar_size_fixed = 0
		}

		#
		# Calculate fixed-size "VIEW" column width
		# NB: Unused in wide-view (-w)
		#
		vsz_fixed = vsz_min
		if (cols >= bar_min2) {
			vsz_fixed += cols - bar_min2
			if (vsz_fixed > vsz_max)
				vsz_fixed = vsz_max
		} else if (cols >= bar_min1) {
			vsz_fixed += cols - bar_min1
			if (vsz_fixed > vsz_max)
				vsz_fixed = vsz_max
		} else if (cols >= vsz_cols1) {
			vsz_fixed += cols - vsz_cols1
		} else if (cols >= vsz_cols2) {
			show_data_columns = 0
			wv = 1
		} else {
			show_data_columns = 0
		}

		if (wv) {
			# Fixed-width
			bar_size = bar_size_fixed

			# Variable-width (%-*s)
			vsz = cols
			vsz -= 0 + 1 # %-*s VIEW + space
			vsz -= dsz # TOTAL
			if (show_data_columns) {
				# space +
				# WRITE(IN)/STAT/CREATE/RMDIR/OPEN/REQS
				# + space
				vsz -= 1 + dsz + 1

				if (bar_size > 0) {
					vsz -= bar_size + 1 # bar + space
				}
				vsz -= dsz
				# READ(OUT)/STATLI/CREATELI/UNLNK/CLOSE
				# or QLEN/BSY in server mode (-s)
			}
		} else if (show_bar_column) {
			# Fixed-width
			vsz = vsz_fixed

			# Variable-width (%-*s)
			bar_size = cols
			bar_size -= vsz + 1 # %[-]*s VIEW + space
			bar_size -= dsz + 1 # TOTAL + space
			# WRITE(IN)/STAT/CREATE/RMDIR/OPEN/REQS + space
			bar_size -= dsz + 1
			bar_size -= 0 + 1 # variable-width bar + space
			# READ(OUT)/STATLI/CREATELI/UNLNK/CLOSE/QLEN/BSY
			bar_size -= dsz
		} else {
			# Fixed-width
			vsz = vsz_fixed
		}

		#
		# Calculate format and line width
		# ST: VIEWS
		#

		fmt = ""
		fmtsz = 0

		fmt = fmt " %-" vsz "s" # VIEW
		fmtsz += 1 + vsz
		fmt = fmt " %" dsz "s" # TOTAL
		fmtsz += 1 + dsz
		# WRITE(IN)/STAT/CREATE/RMDIR/OPEN/REQS
		if (color) {
			fmt = fmt " " red "%" dsz "s"
		} else {
			fmt = fmt " %" dsz "s"
		}
		fmtsz += 1 + dsz

		if (show_bar_column) {
			full_bar = bar_size
			bar_size = int(bar_size / 2)
			if (bar_size * 2 == full_bar) bar_size--
			fmt = fmt " %*s" # left bar
			# right bar
			if (color) {
				fmt = fmt fgreset "|" cyan "%-*s"
			} else {
				fmt = fmt "|%-*s"
			}
			fmtsz += 1 + bar_size + 1 + bar_size
			# READ(OUT)/STATLI/CREATELI/UNLNK/CLOSE/QLEN/BSY
			fmt = fmt " %-" dsz "s"
			fmtsz += 1 + dsz
		} else if (show_data_columns) {
			# READ(OUT)/STATLI/CREATELI/UNLNK/CLOSE/QLEN/BSY
			if (color) {
				fmt = fmt " " cyan "%" dsz "s"
			} else {
				fmt = fmt " %" dsz "s"
			}
			fmtsz += 1 + dsz
		}

		fmt = substr(fmt, 2) # Trim leading space
		fmtsz -= 1
		fmt = fmt (color ? fgreset : "") "\n"

		#
		# Export calculated column sizes for things we truncate
		#
		delete csz
		csz["view"] = vsz

		#
		# Redraw console
		#
		if (cons) {
			clear_buffer()
			buffer_add_data()
			print_buffer()
		}
	}

	#
	# Key/Value-store
	#

	function idx(p1, p2) { return (p2 == "" ? p1 : p1 " " p2) }
	function kv_map(x, field) { kv_map4(x, x, x, field) }

	function clear_data()
	{
		delete _keys
		delete key_value
	}

	function kv_map4(x, prop, key, field, rate)
	{
		json_fields[x]
		json_field[x] = int(field) # SERVER mode (-s)
		json_prop[x] = prop == "" ? x : prop
		json_key[x] = key == "" ? x : key
		json_rate[x] = rate == "" ? key "_rate" : rate
	}

	function kv_ord(nelements, list,        n)
	{
		json_field_order = ""
		for (n = 1; n <= nelements; n++)
			json_field_order = json_field_order " " list[n]
		json_field_order = substr(json_field_order, 2)
		njson_fields = split(json_field_order, json_field_name)
	}

	function kv_sum(p1, p2, v)
	{
		key_value[idx(p1, p2)] += v
		if (debugger > 2) {
			debug3("++ key_value[%s] += %d => %d", idx(p1, p2), v,
				key_value[idx(p1, p2)])
		}
	}

	function kv(p1, p2,        i)
	{
		return ((i = idx(p1, p2)) in key_value ? key_value[i] : "")
	}

	function label_map(n, x, colnam)
	{
		labels["colnam" n] = colnam == "" ? toupper(x) : colnam
		labels["field" n] = json_field[x] # SERVER mode (-s)
		labels["prop" n] = json_prop[x]
		labels["key" n] = json_key[x]
		labels["rate" n] = json_rate[x]
	}

	#
	# Buffer management
	#

	function buffer_add(text) { BUFFER = BUFFER text }

	function print_buffer()
	{
		if (!cons && !output_json) buffer_add("\n")
		printf "%s", BUFFER
		fflush()
	}

	function clear_buffer()
	{
		BUFFER = ""
		if (output_json) return
		if (debugger == 0 && cons)
			buffer_add(sprintf("\033[H\033[J"))
		buffer_add_header()
	}

	function buffer_add1(arg1, total, value1, bar1, bar2,
		value2, prefix, suffix,        str)
	{
		if (redact && view == "USER") {
			if (arg1 !~ unredacted_users)
				arg1 = get_random(length(arg1))
		} else if (redact && view == "CLIENT") {
			if (arg1 !~ unredacted_clients)
				arg1 = get_random(length(arg1))
		} else if (redact && view == "SERVER") {
			if (arg1 !~ unredacted_servers)
				arg1 = get_random(length(arg1))
		}
		if (length(arg1) > csz["view"]) {
			arg1 = substr(arg1, 1, csz["view"])
		}

		if (show_bar_column) {
			str = sprintf(fmt, arg1, total, value2, bar_size,
				bar2, bar_size, bar1, value1)
		} else {
			str = sprintf(fmt, arg1, total, value2, value1)
		}
		if (cols < fmtsz) {
			str = substr(str, 1, cols) (str ~ /\n$/ ? "\n" : "")
		}
		buffer_add(prefix str suffix)
	}

	function _strftime(fmt, tm,        cmd, tfmt)
	{
		if (uname == "Linux") return strftime(fmt, tm)
		if (tm == _strftime_tm && fmt == _strftime_fmt)
			return _strftime_dt
		tfmt = uname == "Linux" ? "-d @%u" : "-r %u"
		(cmd = sprintf("date " tfmt " +\"%s\"", _strftime_tm = tm,
			_strftime_fmt = fmt)) | getline _strftime_dt
		close(cmd)
		return _strftime_dt
	}

	function buffer_add_header(        prefix, suffix,
		presz, n, fmt, dtfmt, dtsz, ifmt, sz, str)
	{
		if (output_json) return
		ifmt = "%.3fs"
		presz = 9 + 1 + length(sprintf(ifmt, interval))
			#  9 = "Interval:"
			#  1 = number of spaces
		sz = cols < fmtsz ? cols : fmtsz
		for (n = split("|%T|%F %T|%c", fmt, /\|/); n > 0; n--) {
			dtfmt = fmt[n]
			dtsz = dtfmt == "" ? 0 : length(strftime(dtfmt, tm))
			if (sz >= presz + 1 + dtsz) break
		}
		if (dtfmt == "") {
			str = sprintf("Interval: " ifmt, interval)
			if (length(str) > sz) {
				str = substr(str, 1, sz)
			}
			buffer_add(str "\n")
		} else {
			buffer_add(sprintf("Interval: %-*s %*s\n",
				sz - 9 - 2 - dtsz, sprintf(ifmt, interval),
				dtsz, _strftime(dtfmt, tm)))
					#  9 = "Interval:"
					#  2 = number of spaces
		}

		prefix = color ? inv green : ""
		suffix = color ? fgreset noinv : ""
		empty_bar = ""

		buffer_add1(view, "TOTAL",
			labels["colnam1"], empty_bar, empty_bar,
			labels["colnam2"], prefix, suffix)
	}

	function buffer_add_data()
	{
		#
		# Process requested view
		#
		process_view(tolower(view))
	}

	#
	# Data parsing
	#

	function uid2name(uid,        cmd, id, idf, name)
	{
		if (uid in uid2name_cache)
			return uid2name_cache[uid]
		(cmd = sprintf("getent passwd %d", uid)) | getline id
		close(cmd)
		name = split(id, idf, /:/) < 3 ? uid : idf[1]
		if (name == "") name = uid
		return uid2name_cache[uid] = name
	}

	function parse_line(        key, value1, value2, kprop, value,
		mul, n, f, v)
	{
		# ST: CTLDATA

		sub(/\r$/, "") # NB: Data comes in CRLF format (sigh)

		#
		# NB: Fix missing whitespace between sum and name
		# NB: An IPv4 addr is not long enough to trigger this bug,
		#     and hostnames cannot end in a number, so insert the
		#     space at the point where they meet.
		#
		if (match($0, /[^[:space:][:digit:]][[:digit:]]+ \[sum\]/)) {
			$0 = substr($0, 1, RSTART) " " substr($0, RSTART + 1)
		}

		#
		# ST: VIEWS OPS
		#

		key = labels["name"] == "NF" ? $NF : $labels["name"]

		# Map UID to name unless disabled (-n)
		if (view == "USER" && !no_names) {
			if (debugger > 2) {
				debug2("Mapped UID %d to \"%s\"",
					key, uid2name(key))
			}
			key = uid2name(key)
		}

		value1 = value2 = 0
		if (view == "SERVER") {
			if (mode == "data") {
				mul = 1024 # NB: KiB/s -> B/s
			} else { # mode == "meta"
				mul = 1
			}
			if (output_json) {
				# ST: CTLDATA
				# NB: Server mode gives no sum, create one
				for (n = 1; n <= njson_fields; n++) {
					f = json_field_name[n]
					v = $json_field[f] * mul
					kv_sum(json_key[f], "Sum:", v)
					kv_sum(json_key[f], key, v)
				}
			} else {
				value1 = $labels["field1"] * mul
				value2 = $labels["field2"] * mul
				kv_sum(labels["key1"], "Sum:", value1)
				kv_sum(labels["key2"], "Sum:", value2)
				kv_sum(labels["key1"], key, value1)
				kv_sum(labels["key2"], key, value2)
			}
		} else {
			# ST: CTLDATA
			delete _props
			$0 = substr($0, length(key) + 1)
			while (match($0, /^ *[^ ]+ \[[^\]]+\]/)) {
				kprop = substr($2, 2, length($2) - 2)
				value = $1
				_props[kprop] = value
				$0 = substr($0, RLENGTH + 1)
			}
			if (output_json) {
				value = 0
				for (n = 1; n <= njson_fields; n++) {
					f = json_field_name[n]
					value += _props[json_prop[f]]
				}
				if (value < 1) return 0
				for (n = 1; n <= njson_fields; n++) {
					f = json_field_name[n]
					kv_sum(json_key[f],
						key, _props[json_prop[f]])
				}
			} else {
				value1 = int(_props[labels["prop1"]])
				value2 = int(_props[labels["prop2"]])
				if (value1 + value2 < 1) return 0
				kv_sum(labels["key1"], key, value1)
				kv_sum(labels["key2"], key, value2)
			}
		}

		_keys[key]
		return 1
	}

	#
	# Data formatting
	#

	function humanize(value,
		raw, n, suffix, suffixes, div, fmt, unit)
	{
		raw = value
		if (mode == "data") {
			div = 1024
			fmt = "%'"'"'.2f%s%s"
			unit = show_basic ? "B" : "B/s"
		} else if (mode == "meta") {
			div = 1000
			fmt = "%'"'"'.1f%s%s"
			unit = show_basic ? "" : "/s"
		}
		n = split(",K,M,G,T,E", suffixes, /,/)
		for (suffix = 1; suffix <= n; suffix++) {
			if (int(value) < div) break
			value /= div
		}
		if (v ~ /\./) sub(/\.?0+$/, "", v)
		value = sprintf(fmt, value, suffixes[suffix], unit)
		return value
	}

	function _asort(src, dest,        k, nitems, i, val)
	{
		k = nitems = 0
		for (i in src) dest[++nitems] = src[i]
		for (i = 1; i <= nitems; k = i++) {
			val = dest[i]
			while ((k > 0) && (dest[k] > val)) {
				dest[k+1] = dest[k]; k--
			}
			dest[k+1] = val
		}
		return nitems
	}

	function json_add(json, key, format, value)
	{
		return json (length(json) < 2 ? "" : ",") \
			sprintf("\"%s\":" format, key, value)
	}

	function json_add_str(json, key, value)
	{
		return json_add(json, key, "\"%s\"", value)
	}

	function json_add_uint(json, key, value)
	{
		return json_add(json, key, "%u", value)
	}

	function json_add_prec(json, key, precision, value,        x)
	{
		x = sprintf("%.*f", precision, value)
		if (x ~ /\./) sub(/\.?0+$/, "", x)
		return json_add(json, key, "%s", x)
	}

	function json_add_float(json, key, value)
	{
		return json_add_prec(json, key, 12, value)
	}

	function process_view(curview,
		bar1, rate1, total1, dv1,
		bar2, rate2, total2, dv2,
		combined_rate, combined_total,
		_keys_sorted, x, cred, i, v, r, n, table_rows, f)
	{
		time_delta = interval
		if (time_delta < 1) time_delta = 1 # prevent division-by-0
		debug1("Time delta is %d seconds", time_delta)

		if (output_json && in_summary) {
			in_summary = 0
			if (nsamples != 1) return
		}

		bar1 = bar2 = ""
		total1 = kv(labels["key1"], "Sum:")
		rate1 = total1 / time_delta
		total2 = kv(labels["key2"], "Sum:")
		rate2 = total2 / time_delta
		combined_total = total1 + total2
		combined_rate = combined_total / time_delta

		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out,
				"ident", "total_" curview)
			if (mode == "data") {
				json_out = json_add_uint(json_out,
					labels["combined_total"],
					combined_total)
				json_out = json_add_float(json_out,
					labels["combined_rate"], combined_rate)
			}
			for (n = 1; n <= njson_fields; n++) {
				f = json_field_name[n]
				v = kv(json_key[f], "Sum:")
				json_out = json_add_uint(json_out,
					json_key[f], v)
				json_out = json_add_float(json_out,
					json_rate[f], v / interval)
			}
			buffer_add("{" json_out "}\n")
		} else {
			# Display values
			if (show_basic) {
				dvc = combined_total
				dv1 = total1
				dv2 = total2
			} else {
				dvc = combined_rate
				dv1 = rate1
				dv2 = rate2
			}
			buffer_add1("total", humanize(dvc),
				humanize(dv1), bar1, bar2, humanize(dv2))
		}

		#
		# Decorate combined read/write values
		# ST: SORTING
		#
		for (cred in _keys) {
			if (sort == "total") {
				v = 0
				v += kv(labels["key1"], cred)
				v += kv(labels["key2"], cred)
				v = int(v) # Pedantic
			} else {
				v = int(kv(sort, cred))
			}
			_keys[cred] = sprintf("%99d %s", v, cred)
		}

		#
		# Print subtotals
		#
		r = 1
		n = _asort(_keys, _keys_sorted)
		table_rows = output_json || !cons ? n : rows - 4
		for (i = n; i >= 1 && r <= table_rows; i--) {
			if (debugger > 2) {
				debug2("r=[%d] table_rows=[%d]", r, table_rows)
			}
			cred = _keys_sorted[i]
			sub(/^ *[^ ]+ +/, "", cred) # Undecorate
			r += process_cred(curview, cred)
		}
		if (more = i > 0) buffer_add(sprintf("%s(%d more) ... %s",
			color ? inv bold yellow : "", i,
			color ? noinv nobold fgreset : ""))
	}

	function process_cred(curview, cred,
		total1, cred_value1, bar1, bar1_pct, bar1_size, value1_rate,
		total2, cred_value2, bar2, bar2_pct, bar2_size, value2_rate,
		cred_total, cred_rate, pch, dv1, dv2, dvc, x, f, v, _cred)
	{
		if (cred == "Sum:") return 0
		pch = "="
		if (debugger > 2) {
			debug1("-> process_cred(curview = %s, ...)", curview)
			debug1("+ cred=[%s]", cred)
		}

		total1 = kv(labels["key1"], "Sum:")
		total2 = kv(labels["key2"], "Sum:")
		cred_value1 = kv(labels["key1"], cred)
		cred_value2 = kv(labels["key2"], cred)

		cred_total = cred_value1 + cred_value2
		cred_rate = cred_total / time_delta

		# Bar 1
		value1_rate = cred_value1 / time_delta
		if (total1 > 0)
			bar1_pct = cred_value1 / total1
		else
			bar1_pct = 0
		bar1_size = bar_size * bar1_pct
		bar1 = sprintf("%*s", bar1_size, "")
		gsub(/ /, pch, bar1)
		sub(/.$/, ">", bar1)

		# Bar 2
		value2_rate = cred_value2 / time_delta
		if (total2 > 0)
			bar2_pct = cred_value2 / total2
		else
			bar2_pct = 0
		bar2_size = bar_size * bar2_pct
		bar2 = sprintf("%*s", bar2_size, "")
		gsub(/ /, pch, bar2)
		sub(/^./, "<", bar2)

		if (output_json) {
			# ST: JSONDATA
			if (!show_zero_values) {
				v = 0
				for (n = 1; n <= njson_fields; n++) {
					f = json_field_name[n]
					v += kv(json_key[f], cred)
				}
				if (int(v) == 0) return 0
			}
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out, "ident", curview)
			_cred = cred
			if (redact && curview == "user") {
				if (cred !~ unredacted_users)
					_cred = get_random(length(cred))
			} else if (redact && curview == "client") {
				if (cred !~ unredacted_clients)
					_cred = get_random(length(cred))
			} else if (redact && curview == "server") {
				if (cred !~ unredacted_servers)
					_cred = get_random(length(cred))
			}
			json_out = json_add_str(json_out, curview, _cred)
			if (mode == "data") {
				json_out = json_add_uint(json_out,
					labels["combined_total"], cred_total)
				json_out = json_add_float(json_out,
					labels["combined_rate"], cred_rate)
			}
			for (n = 1; n <= njson_fields; n++) {
				f = json_field_name[n]
				v = kv(json_key[f], cred)
				if (int(v) == 0 && !show_zero_values) continue
				json_out = json_add_uint(json_out,
					json_key[f], v)
				json_out = json_add_float(json_out,
					json_rate[f], v / interval)
			}
			buffer_add("{" json_out "}\n")
		} else {
			if (show_basic) {
				dvc = cred_total
				dv1 = cred_value1
				dv2 = cred_value2
			} else {
				dvc = cred_rate
				dv1 = value1_rate
				dv2 = value2_rate
			}
			buffer_add1(cred, humanize(dvc),
				humanize(dv1), bar1, bar2, humanize(dv2))

		}

		return 1
	}

	#
	# Flow control
	#

	function sample_check()
	{
		if (nsamples > 0 && --samples_left < 1) {
			system(sprintf("kill %d > /dev/null 2>&1", bpid))
			if (more) printf "\n"
			exit
		}
	}

	######################################## MAIN

	sub(/^EXIT:/, "") { exit_status = $0; next }
	NR == 1 && $1 == "spawn" && !(raw_view || debugger) { next }

	raw_view || debugger > 1 {
		if (debugger) {
			print > stderr
			fflush(stderr)
		} else
			print

		# Exit if no more samples desired
		if (/^---$/ && raw_view) sample_check()

		if (debugger == 0) next
	}

	#
	# ST: CTLDATA
	#

	/^===/ { # Data start
		tm = _systime()
		if (view == "SERVER") {
			if (subsamples_left == interval) {
				clear_data()
				clear_buffer()
			}
		} else {
			clear_data()
			clear_buffer()
		}
		next
	}

	/^---$/ { # Data end
		if (view == "SERVER") {
			if (subsamples_left-- > 1) next
			else subsamples_left = interval
		}

		buffer_add_data()

		#
		# Dump information
		#
		print_buffer()
		sample_check() # Exit if no more samples desired
		next
	}

	view == "SERVER" && /^[[:space:]]*[[:digit:]]/ { # Data
		parse_line()
		next
	}

	view != "SERVER" && /^[^=[:space:]]/ && $1 !~ /\|/ { # Data
		parse_line()
		next
	}

	#
	# ST: CALLS
	#

	{ call = "" }

	match($0, /^[_a-z]+(-[_a-z]+)?\|/) {
		call = substr($0, 1, RLENGTH - 1)
		$0 = substr($0, RSTART + RLENGTH)
	}

	call == "resize" {
		if (output_json) next
		rows = $1
		cols = $2
		resize()
	}

	################################################## END

	END { exit exit_status }
' # END-QUOTE

################################################################################
# END
################################################################################
# Local Variables:
# mode: sh
# tab-width: 8
# sh-basic-offset: 8
# indent-tabs-mode: t
# backward-delete-char-untabify-method: nil
# End:
