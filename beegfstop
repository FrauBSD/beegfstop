#!/bin/sh
# vi: set ft=sh noet ts=8 sw=8 :: Vi/ViM
############################################################ IDENT(1)
#
# $Title: Script to generate top-like statistics for BeeGFS I/O $
# $Copyright: 2020 Devin Teske. All rights reserved. $
# $FrauBSD: beegfstop/beegfstop 2020-07-06 18:27:43 -0700 freebsdfrau $
#
############################################################ INFORMATION
#
# In beegfstop, a ``view'' is the user's choice between -c, -s, or -u.
# For example, `-u' asks beegfstop to display the ``user view'' where statistics
# displayed are on a per-user basis.
#
# The ``mode'' is the user's choice between viewing data input/output (this is
# the default) and metadata operations (-m).
#
# The code is broken down into:
# 	- Mode selection (user choice)
# 	- View selection (user choice)
# 	- Inspection of running system
# 	- beegfs-ctl execution
# 	- awk to process beegfs-ctl output
#
# Code navigating Search Terms/ST:
# 	BEEGFSCTL	Start of beegfs-ctl
# 	CTLDATA		beegfs-ctl data generation and processing
# 	JSONDATA	JSON data generation
# 	OPS		Data operations (read vs write)
# 	POST		beegfs-ctl post-processor (awk)
# 	PRE		Start of pre-processor (sh)
# 	SORTING		Sort routines
# 	VIEWDATA	View data generation
# 	VIEWS		View processing
#
############################################################ DEFAULTS

DEFAULT_INTERVAL=2 # seconds

#
# Sorting choices (case-insensitive):
# 	total (in any mode; default sort column)
# 	read write in out (without `-m')
# 	stat statLI (with `-m' and either `-u' or `-c')
# 	reqs qlen (with `-m' and `-s')
#
DEFAULT_SORT=total

############################################################ GLOBALS

VERSION='$Version: 6.0 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
COLOR=1					# -C
DEBUGGER=				# -D
INTERVAL=$DEFAULT_INTERVAL		# -i sec
MODE=data				# vs `meta' (-m)
NO_NAMES=				# -n
NSAMPLES=				# -N num
OUTPUT_JSON=				# -j
RAW_VIEW=				# -r
REDACT=${BEEGFSTOP_REDACT:+1}		# -R
SHOW_BASIC=				# -b
SORT=$DEFAULT_SORT			# -k col
VIEW_CLIENT=				# -c
VIEW_SERVER=				# -s
VIEW_USER=				# -u (default)
WIDE_VIEW=				# -w

#
# Miscellaneous
#
CONS=1
[ -t 1 ] || CONS= COLOR= # stdout is not a tty
MODE_DATA=
MODE_META=
VIEW=

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

usage()
{
	local fmt="$1"
	local optfmt="\t%-11s %s\n"

	exec >&2
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@"
	fi

	printf "Usage: %s [OPTIONS]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-b" "Show basic counts instead of rates."
	printf "$optfmt" "-C" "Always enable color."
	printf "$optfmt" "-c" "View read/write activity by client."
	printf "$optfmt" "-D" "Enable debugger."
	printf "$optfmt" "-h" "Print usage statement and exit."
	printf "$optfmt" "-i sec" \
		"Set interval seconds. Default \`$DEFAULT_INTERVAL'."
	printf "$optfmt" "-j" "Output JSON formatted data."
	printf "$optfmt" "-k col" "Sort column (default \`$DEFAULT_SORT')."
	printf "$optfmt" "-m" "Show metadata statistics."
	printf "$optfmt" "-N num" "Perform num samples and exit."
	printf "$optfmt" "-n" "Do not attempt to map uid/gid/ip to names."
	printf "$optfmt" "-o" "Force non-console output."
	printf "$optfmt" "-R" "Redact potentially sensitive information."
	printf "$optfmt" "-r" "Raw view. Do not format output of bpftrace."
	printf "$optfmt" "-s" "View read/write activity by server."
	printf "$optfmt" "-u" "View read/write activity by user (default)."
	printf "$optfmt" "-v" "Print version and exit."
	printf "$optfmt" "-w" "Wide view. Maximize width of first column."

	die
}

run_beegfs_ctl()
{
	case "$MODE" in
	data) set -- --nodetype=storage "$@" ;;
	meta) set -- --nodetype=meta "$@" ;;
	esac
	set -- --interval=$INTERVAL "$@"
	[ "$NO_NAMES" ] || set -- --names "$@"
	if [ "$VIEW_CLIENT" ]; then
		set -- --clientstats ${MODE_DATA:+--rwunit=B} --perinterval "$@"
	elif [ "$VIEW_SERVER" ]; then
		set -- --serverstats --perserver "$@"
	elif [ "$VIEW_USER" ]; then
		set -- --userstats ${MODE_DATA:+--rwunit=B} --perinterval "$@"
	fi
	expect -f- strace -e trace=poll beegfs-ctl "$@" <<-'END-EXPECT' | awk '
		!/^(poll\(|\))/ { print; fflush(); next}
		sub(/^poll\(.*fd=0.*/, "---") { print; fflush() }
	' # END-AWK
		spawn {*}$argv
		while (1) {
			expect {
				-re "fd=0" { send_user "\n" }
				eof { exit 0 }
			}
		}
	END-EXPECT
}

#
# ST: CALLS
#

send_user()
{
	local type="$1"
	shift 1 # type
	printf "%s|%s\n" "$type" "$*"
}

resize()
{
	local size
	if [ -e /dev/tty ]; then
		size=$( { stty size < /dev/tty; } 2> /dev/null )
	else
		size=$( stty size 2> /dev/null )
	fi
	send_user resize "${size:-24 80}"
}

############################################################ MAIN

#
# Process command-line options
#
while getopts bCcDhi:jk:mN:noRrsuvw flag; do
	case "$flag" in
	b) SHOW_BASIC=1 ;;
	C) COLOR=1 ;;
	c) VIEW=CLIENT VIEW_CLIENT=1 ;;
	D) DEBUGGER=1 RAW_VIEW=1 ;;
	i) INTERVAL="$OPTARG" ;;
	j) OUTPUT_JSON=1 ;;
	k) SORT="$OPTARG" ;;
	m) MODE=meta ;;
	N) [ "$OPTARG" ] || usage "-N option requires an argument" # NOTREACHED
		NSAMPLES="$OPTARG" ;;
	n) NO_NAMES=1 ;;
	o) CONS= COLOR= ;;
	R) REDACT=1 ;;
	r) RAW_VIEW=1 ;;
	s) VIEW=SERVER VIEW_SERVER=1 ;;
	u) VIEW=USER VIEW_USER=1 ;;
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	w) WIDE_VIEW=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Process command-line arguments
#
[ $# -eq 0 ] || usage "Too many arguments" # NOTREACHED

#
# Prevent non-functional option combinations
#
if [ "$SHOW_BASIC" ]; then
	[ ! "$OUTPUT_JSON" ] || die "-b cannot be combined with -j"
fi

#
# Silently ignore previous view options unless JSON output
#
[ "$VIEW" ] || VIEW=USER VIEW_USER=1
if [ ! "$OUTPUT_JSON" ]; then
	case "$VIEW" in # ST: VIEWS
	CLIENT) VIEW_SERVER= VIEW_USER= ;;
	SERVER) VIEW_CLIENT= VIEW_USER= ;;
	USER) VIEW_CLIENT= VIEW_SERVER= ;;
	esac
fi

#
# Validate `-i sec' option
#
case "$INTERVAL" in
"") usage "missing -i argument" ;; # NOTREACHED
0) die "-i sec must be non-zero" ;;
*[!0-9]*) die "-i sec must be a number" ;;
esac

#
# Validate `-k col' option
# ST: SORTING
#
if [ "$MODE" = data ]; then
	case "$SORT" in
	"") usage "missing -k argument" ;; # NOTREACHED
	[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
	[Rr][Ee][Aa][Dd]|[Ii][Nn]) SORT=read ;; # READ(IN)
	[Ww][Rr][Ii][Tt][Ee]|[Oo][Uu][Tt]) SORT=write ;; # WRITE(OUT)
	*) die "-k col must be one of: total read write in out"
	esac
elif [ "$MODE" = meta ]; then
	if [ "$VIEW_USER" -o "$VIEW_CLIENT" ]; then
		case "$SORT" in
		"") usage "missing -k argument" ;; # NOTREACHED
		[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
		[Ss][Tt][Aa][Tt]) SORT=stat ;; # STAT
		[Ss][Tt][Aa][Tt][Ll][Ii]) SORT=statLI ;; # STATLI
		*) die "-k col must be one of: total stat statLI"
		esac
	elif [ "$VIEW_SERVER" ]; then
		case "$SORT" in
		"") usage "missing -k argument" ;; # NOTREACHED
		[Tt][Oo][Tt][Aa][Ll]) SORT=total ;; # TOTAL
		[Rr][Ee][Qq][Ss]) SORT=reqs ;; # REQS
		[Qq][Ll][Ee][Nn]) SORT=qlen ;; # QLEN
		*) die "-k col must be one of: total reqs qlen"
		esac
	fi
fi

#
# Process `-m' option
#
case "$MODE" in
data) MODE_DATA=1 MODE_META= ;;
meta) MODE_META=1 MODE_DATA= ;;
esac

#
# Validate `-N num' option
#
case "$NSAMPLES" in
*[!0-9]*) die "-N num must be a positive integer" ;;
esac

#
# Get terminal size
#
size=$( resize )
size="${size#*|}"
if [ "$size" ]; then
	cols="${size#*[$IFS]}"
	rows="${size%%[$IFS]*}"
fi
case "$rows$cols" in
""|*[!0-9]*)
	cols=80
	rows=24
	;;
esac

#
# Run script
# ST: PRE
#
{
	trap resize WINCH # ST: SIGWINCH

	#
	# Start background beegfs-ctl
	# ST: BEEGFSCTL
	#
	run_beegfs_ctl &
	bpid=$!

	#
	# Wait on background (beegfs-ctl) child
	#
	status_collected=
	while kill -0 $bpid > /dev/null 2>&1; do
		wait > /dev/null 2>&1 # Collect exit status
		[ "$status_collected" ] || status_collected=$?
	done
	echo EXIT:$status_collected # Send status to post-processor

} | awk -v color=${COLOR:-0} \
	-v cols=$cols \
	-v cons=${CONS:-0} \
	-v data_mode=${MODE_DATA:-0} \
	-v debugger=${DEBUGGER:-0} \
	-v interval=$INTERVAL \
	-v meta_mode=${MODE_META:-0} \
	-v mode="$MODE" \
	-v no_names=${NO_NAMES:-0} \
	-v nsamples=${NSAMPLES:--1} \
	-v output_json=${OUTPUT_JSON:-0} \
	-v raw_view=${RAW_VIEW:-0} \
	-v redact=${REDACT:-0} \
	-v rows=$rows \
	-v show_basic=${SHOW_BASIC:-0} \
	-v sort="$SORT" \
	-v uname=$( uname ) \
	-v view="$VIEW" \
	-v wide_view=${WIDE_VIEW:-0} \
	'####################################### BEGIN

	# ST: POST

	BEGIN {
		debug2("Terminal size (rows, cols) = (%d, %d)", rows, cols)

		exit_status = 0 # SUCCESS
		in_summary = 1
		time_delta = 0 # Calculated
		samples_left = ++nsamples
		tm = _systime()

		inv	= "\033[7m"
		noinv	= "\033[27m"
		bold    = "\033[1m"
		nobold  = "\033[22m"
		red     = "\033[31m"
		green   = "\033[32m"
		yellow  = "\033[33m"
		cyan    = "\033[36m"
		fgreset = "\033[39m"

		# Obtain current process (awk) pid
		(cmd = "echo $PPID") | getline apid
		close(cmd)

		# Obtain parent process (sh) pid
		getline stat < (file = sprintf("/proc/%d/stat", apid))
		close(file)
		split(stat, st)
		spid = st[4]

		# Obtain parent process (sh) name
		getline stat < (file = sprintf("/proc/%d/stat", spid))
		close(file)
		split(stat, st)
		comm = st[2]
		if (match(comm, /^\(.*\)$/))
			comm = substr(comm, 2, length(comm) - 2)

		# Obtain child (sh) pid
		(cmd = sprintf("pgrep -P %d %s", spid, comm)) | getline cpid
		close(cmd)

		# Obtain beegfs-ctl pid
		(cmd = sprintf("pgrep -P %d", cpid)) | getline spid
		close(cmd)
		(cmd = sprintf("pgrep -P %d expect", spid)) | getline epid
		close(cmd)
		(cmd = sprintf("pgrep -P %d strace", epid)) | getline spid
		close(cmd)
		(cmd = sprintf("pgrep -P %d beegfs-ctl", spid)) | getline bpid
		close(cmd)

		if (!raw_view) {
			clear_data()
			resize()
		}

		if (redact) {
			m = "^(USER|total|"
			if ((u = ENVIRON["USER"]) != "")
				m = m u "|"
			if ((s = ENVIRON["SUDO_USER"]) != "" && s != u)
				m = m s "|"
			cmd = "getent passwd 2> /dev/null"
			while (cmd | getline > 0) {
				if (split($0, f, /:/) < 3) continue
				if (f[3] > 1024 && f[3] !~ /^6553[456]$/)
					continue
				m = m f[1] "|"
			}
			close(cmd)
			m = m "\\*)$"
			unredacted_users = m

			unredacted_clients = "^(CLIENT|total|\\*)$"
			unredacted_servers = "^(SERVER|total|\\*)$"
		}
	}

	######################################## FUNCTIONS

	function _systime(        cmd, tm) {
		if (uname == "Linux") return systime()
		(cmd = "date +%s") | getline tm
		close(cmd)
		return tm
	}

	function debug1(fmt,a1) { if (debugger) printf fmt "\n", a1 }
	function debug2(fmt,a1,a2) { if (debugger) printf fmt "\n", a1, a2 }
	function buffer_add(text) { BUFFER = BUFFER text }

	function print_buffer()
	{
		if (!cons && !output_json) buffer_add("\n")
		printf "%s", BUFFER
		fflush()
	}

	function get_random(len,        c, n, r, rdata, rfile, rlen)
	{
		if (len < 1) return ""
		rlen = 0
		rdata = ""
		rfile = "/dev/urandom"
		while (length(rdata) < len && getline r < rfile > 0) {
			for (n = split(r, c, ""); n >= 1; n--) {
				if (c[n] !~ /[\x41-\x5a]/) continue
				rdata = rdata c[n]
				if (++rlen == len) break
			}
		}
		close(rfile)
		return rdata
	}

	function resize(        dsz, vsz, vsz_fixed, bar_size_fixed,
		bar_size_fixed_max, bar_size_fixed_min, bar_min1, bar_min2,
		vsz_cols1, vsz_cols2, vsz_max, vsz_min, wv)
	{
		if (output_json) return

		#
		# Calculate columns and column widths
		# ST: VIEWS
		#
		# NB: bar_size = size of bar column (if shown)
		# NB: dsz = size of TOTAL, READ(OUT), WRITE(IN), STAT, STATLI,
		#     REQS, and QLEN data columns
		# NB: vsz = size of VIEW column ("view size")
		#
		# If given -w (wide view) make bar_size fixed-width and
		# vsz variable-width.
		#
		# Without -w, make vsz fixed-width and bar_size variable.
		#

		wv = wide_view

		show_bar_column = 1
		if (mode == "data") {
			show_rw_columns = 1
			show_stat_columns = 0
		} else if (mode == "meta") {
			show_rw_columns = 0
			show_stat_columns = 1
		}

		vsz_min = length(view)
		vsz_max = 15

		dsz = show_basic ? 10 : 12
		bar_size_fixed_max = 21
		bar_size_fixed_min = 11

		#
		# Calculate minimum terminal width required (bar_min1)
		# to display small bar (bar_size_fixed_min) and also
		# minimum terminal width required (bar_min2) to display
		# larger bar (bar_size_fixed_max).
		#
		bar_min1 = 0
		bar_min1 += vsz_min + 1 # VIEW + space
		bar_min1 += dsz + 1 # TOTAL + space
		vsz_cols2 = bar_min1
		bar_min1 += dsz + 1 # WRITE(IN) + space
		vsz_cols1 = bar_min2 = bar_min1
		bar_min1 += bar_size_fixed_min + 1 # small bar + space
		bar_min2 += bar_size_fixed_max + 1 # bigger bar + space
		bar_min1 += dsz # READ(OUT)
		bar_min2 += dsz # READ(OUT)
		vsz_cols1 += dsz # READ(OUT)

		#
		# Calculate fixed bar width based on terminal width
		# NB: Only used in wide-view (-w)
		# NB: If terminal is too narrow, disable bar/columns
		#
		if (cols >= bar_min2) {
			bar_size_fixed = bar_size_fixed_max
		} else if (cols >= bar_min1) {
			bar_size_fixed = bar_size_fixed_min
		} else {
			show_bar_column = 0
			bar_size_fixed = 0
		}

		#
		# Calculate fixed-size "VIEW" column width
		# NB: Unused in wide-view (-w)
		#
		vsz_fixed = vsz_min
		if (cols >= bar_min2) {
			vsz_fixed += cols - bar_min2
			if (vsz_fixed > vsz_max)
				vsz_fixed = vsz_max
		} else if (cols >= bar_min1) {
			vsz_fixed += cols - bar_min1
			if (vsz_fixed > vsz_max)
				vsz_fixed = vsz_max
		} else if (cols >= vsz_cols1) {
			vsz_fixed += cols - vsz_cols1
		} else if (cols >= vsz_cols2) {
			if (mode == "data") {
				show_rw_columns = 0
			} else if (mode == "meta") {
				show_stat_columns = 0
			}
			wv = 1
		} else {
			if (mode == "data") {
				show_rw_columns = 0
			} else if (mode == "meta") {
				show_stat_columns = 0
			}
		}

		if (wv) {
			# Fixed-width
			bar_size = bar_size_fixed

			# Variable-width (%-*s)
			vsz = cols
			vsz -= 0 + 1 # %-*s VIEW + space
			vsz -= dsz # TOTAL
			if (show_rw_columns || show_stat_columns) {
				# space + WRITE(IN)/STAT/REQS + space
				vsz -= 1 + dsz + 1

				if (bar_size > 0) {
					vsz -= bar_size + 1 # bar + space
				}
				vsz -= dsz # READ(OUT)/STATLI/QLEN
			}
		} else if (show_bar_column) {
			# Fixed-width
			vsz = vsz_fixed

			# Variable-width (%-*s)
			bar_size = cols
			bar_size -= vsz + 1 # %[-]*s VIEW + space
			bar_size -= dsz + 1 # TOTAL + space
			bar_size -= dsz + 1 # WRITE(IN)/STAT/REQS + space
			bar_size -= 0 + 1 # variable-width bar + space
			bar_size -= dsz # READ(OUT)/STATLI/QLEN
		} else {
			# Fixed-width
			vsz = vsz_fixed
		}

		#
		# Calculate format and line width
		# ST: VIEWS
		#

		fmt = ""
		fmtsz = 0

		fmt = fmt " %-" vsz "s" # VIEW
		fmtsz += 1 + vsz
		fmt = fmt " %" dsz "s" # TOTAL
		fmtsz += 1 + dsz
		if (color) {
			fmt = fmt " " red "%" dsz "s" # WRITE(IN)/STAT/REQS
		} else {
			fmt = fmt " %" dsz "s" # WRITE(IN)/STAT/REQS
		}
		fmtsz += 1 + dsz

		if (show_bar_column) {
			full_bar = bar_size
			bar_size = int(bar_size / 2)
			if (bar_size * 2 == full_bar) bar_size--
			fmt = fmt " %*s" # write_bar
			# read/stat bar
			if (color) {
				fmt = fmt fgreset "|" cyan "%-*s"
			} else {
				fmt = fmt "|%-*s"
			}
			fmtsz += 1 + bar_size + 1 + bar_size
			fmt = fmt " %-" dsz "s" # READ(OUT)/STATLI/QLEN
			fmtsz += 1 + dsz
		} else if (show_rw_columns || show_stat_columns) {
			# READ(OUT)/STATLI/QLEN
			if (color) {
				fmt = fmt " " cyan "%" dsz "s"
			} else {
				fmt = fmt " %" dsz "s"
			}
			fmtsz += 1 + dsz
		}

		fmt = substr(fmt, 2) # Trim leading space
		fmtsz -= 1
		fmt = fmt (color ? fgreset : "") "\n"

		#
		# Export calculated column sizes for things we truncate
		#
		delete csz
		csz["view"] = vsz

		#
		# Redraw console
		#
		if (cons) {
			clear_buffer()
			buffer_add_data()
			print_buffer()
		}
	}

	function clear_data()
	{
		# ST: VIEWS
		delete _keys

		if (data_mode) {
			delete key_read
			delete key_write
		} else if (meta_mode) {
			if (view == "SERVER") {
				delete key_reqs
				delete key_qlen
			} else {
				delete key_stat
				delete key_statLI
			}
		}
	}

	function clear_buffer()
	{
		BUFFER = ""
		if (output_json) return
		if (!debugger && cons)
			buffer_add(sprintf("\033[H\033[J"))
		buffer_add_header()
	}

	function buffer_add1(arg1, total, value1, bar1, bar2,
		value2, prefix, suffix,        str)
	{
		if (redact && view == "USER") {
			if (arg1 !~ unredacted_users)
				arg1 = get_random(length(arg1))
		} else if (redact && view == "CLIENT") {
			if (arg1 !~ unredacted_clients)
				arg1 = get_random(length(arg1))
		} else if (redact && view == "SERVER") {
			if (arg1 !~ unredacted_servers)
				arg1 = get_random(length(arg1))
		}
		if (length(arg1) > csz["view"]) {
			arg1 = substr(arg1, 1, csz["view"])
		}

		if (show_bar_column) {
			str = sprintf(fmt, arg1, total, value2, bar_size,
				bar2, bar_size, bar1, value1)
		} else {
			str = sprintf(fmt, arg1, total, value2, value1)
		}
		if (cols < fmtsz) {
			str = substr(str, 1, cols) (str ~ /\n$/ ? "\n" : "")
		}
		buffer_add(prefix str suffix)
	}

	function _strftime(fmt, tm,        cmd, tfmt)
	{
		if (uname == "Linux") return strftime(fmt, tm)
		if (tm == _strftime_tm && fmt == _strftime_fmt)
			return _strftime_dt
		tfmt = uname == "Linux" ? "-d @%u" : "-r %u"
		(cmd = sprintf("date " tfmt " +\"%s\"", _strftime_tm = tm,
			_strftime_fmt = fmt)) | getline _strftime_dt
		close(cmd)
		return _strftime_dt
	}

	function buffer_add_header(        prefix, suffix,
		presz, n, fmt, dtfmt, dtsz, ifmt, sz, str)
	{
		if (output_json) return
		ifmt = "%.3fs"
		presz = 9 + 1 + length(sprintf(ifmt, interval))
			#  9 = "Interval:"
			#  1 = number of spaces
		sz = cols < fmtsz ? cols : fmtsz
		for (n = split("|%T|%F %T|%c", fmt, /\|/); n > 0; n--) {
			dtfmt = fmt[n]
			dtsz = dtfmt == "" ? 0 : length(strftime(dtfmt, tm))
			if (sz >= presz + 1 + dtsz) break
		}
		if (dtfmt == "") {
			str = sprintf("Interval: " ifmt, interval)
			if (length(str) > sz) {
				str = substr(str, 1, sz)
			}
			buffer_add(str "\n")
		} else {
			buffer_add(sprintf("Interval: %-*s %*s\n",
				sz - 9 - 2 - dtsz, sprintf(ifmt, interval),
				dtsz, _strftime(dtfmt, tm)))
					#  9 = "Interval:"
					#  2 = number of spaces
		}
		prefix = color ? inv green : ""
		suffix = color ? fgreset noinv : ""
		empty_bar = ""
		# ST: VIEWS
		if (mode == "data") {
			colnam1 = "READ(OUT)"
			colnam2 = "WRITE(IN)"
		} else if (mode == "meta") {
			if (view == "SERVER") {
				colnam1 = "REQS"
				colnam2 = "QLEN"
			} else {
				colnam1 = "STAT"
				colnam2 = "STATLI"
			}
		}
		buffer_add1(view, "TOTAL",
			colnam1, empty_bar, empty_bar, colnam2,
			prefix, suffix)
	}

	function buffer_add_data()
	{
		#
		# Process requested view
		#
		process_view(tolower(view))
	}

	function parse_line()
	{
		# ST: CTLDATA
		sub(/\r$/, "")
		if (match($0, /[^[:space:][:digit:]][[:digit:]]+ \[sum\]/)) {
			$0 = substr($0, 1, RSTART) " " substr($0, RSTART + 1)
		}

		#
		# ST: VIEWS
		#

		if (view == "SERVER") {
			key = no_names ? $1 : $NF
		} else {
			key = $1
		}

		if (mode == "data") {
			read_bytes = write_bytes = 0
		} else if (mode == "meta") {
			if (view == "SERVER") {
				reqs = qlen = 0
			} else {
				stat = statLI = 0
			}
		}
		if (view == "SERVER") {
			if (mode == "data") {
				# NB: KiB/s -> B/interval
				read_bytes = $3 * 1024 * interval
				write_bytes = $2 * 1024 * interval
			} else if (mode == "meta") {
				# NB: ops/s -> ops/interval
				reqs = $2 * interval
				qlen = $3 * interval
			}
		} else {
			delete _props
			$0 = substr($0, length(key) + 1)
			while (match($0, /^ *[^ ]+ \[[^\]]+\]/)) {
				kprop = substr($2, 2, length($2) - 2)
				value = $1
				_props[kprop] = value
				$0 = substr($0, RLENGTH + 1)
			}
			if (mode == "data") {
				read_bytes = int(_props["B-rd"])
				write_bytes = int(_props["B-wr"])
				if (read_bytes + write_bytes < 1) return 0
			} else if (mode == "meta") {
				stat = int(_props["stat"])
				statLI = int(_props["statLI"])
				if (stat + statLI < 1) return 0
			}
		}

		#
		# ST: OPS
		#

		_keys[key]
		if (view == "SERVER") {
			if (mode == "data") {
				key_read["Sum:"] += read_bytes
				key_write["Sum:"] += write_bytes
			} else if (mode == "meta") {
				key_reqs["Sum:"] += reqs
				key_qlen["Sum:"] += qlen
			}
		}
		if (mode == "data") {
			key_read[key] = read_bytes
			key_write[key] = write_bytes
		} else if (mode == "meta") {
			if (view == "SERVER") {
				key_reqs[key] = reqs
				key_qlen[key] = qlen
			} else {
				key_stat[key] = stat
				key_statLI[key] = statLI
			}
		}

		return 1
	}

	function humanize(value,
		raw, n, suffix, suffixes, div, fmt, unit)
	{
		raw = value
		if (mode == "data") {
			div = 1024
			fmt = "%'"'"'.2f%s%s"
			unit = show_basic ? "B" : "B/s"
		} else if (mode == "meta") {
			div = 1000
			fmt = "%'"'"'.1f%s%s"
			unit = show_basic ? "" : "/s"
		}
		n = split(",K,M,G,T,E", suffixes, /,/)
		for (suffix = 1; suffix <= n; suffix++) {
			if (int(value) < div) break
			value /= div
		}
		if (v ~ /\./) sub(/\.?0+$/, "", v)
		value = sprintf(fmt, value, suffixes[suffix], unit)
		return value
	}

	function _asort(src, dest,        k, nitems, i, val)
	{
		k = nitems = 0
		for (i in src) dest[++nitems] = src[i]
		for (i = 1; i <= nitems; k = i++) {
			val = dest[i]
			while ((k > 0) && (dest[k] > val)) {
				dest[k+1] = dest[k]; k--
			}
			dest[k+1] = val
		}
		return nitems
	}

	function json_add(json, key, format, value)
	{
		return json (length(json) < 2 ? "" : ",") \
			sprintf("\"%s\":" format, key, value)
	}

	function json_add_str(json, key, value)
	{
		return json_add(json, key, "\"%s\"", value)
	}

	function json_add_uint(json, key, value)
	{
		return json_add(json, key, "%u", value)
	}

	function json_add_prec(json, key, precision, value,        x)
	{
		x = sprintf("%.*f", precision, value)
		if (x ~ /\./) sub(/\.?0+$/, "", x)
		return json_add(json, key, "%s", x)
	}

	function json_add_float(json, key, value)
	{
		return json_add_prec(json, key, 12, value)
	}

	function sample_check()
	{
		if (nsamples > 0 && --samples_left < 1) {
			system(sprintf("kill %d > /dev/null 2>&1", bpid))
			if (more) printf "\n"
			exit
		}
	}

	function process_view(curview,
		read_bar, read_rate, read_total,
		write_bar, write_rate, write_total,
		rw_rate, rw_total,
		reqs_bar, reqs_rate,
		qlen_bar, qlen_rate,
		reqlen_rate, reqlen_total,
		stat_bar, stat_rate,
		statLI_bar, statLI_rate,
		stat_all_rate, stat_all_total,
		_keys_sorted, cred, i, v, r, n, table_rows)
	{
		time_delta = interval
		if (time_delta < 1) time_delta = 1 # prevent division-by-0
		debug1("Time delta is %d seconds", time_delta)

		if (output_json && in_summary) {
			in_summary = 0
			if (nsamples != 1) return
		}

		if (data_mode) {
			read_total = key_read["Sum:"]
			read_rate = read_total / time_delta
			read_bar = ""

			write_total = key_write["Sum:"]
			write_rate = write_total / time_delta
			write_bar = ""

			rw_total = read_total + write_total
			rw_rate = rw_total / time_delta
		} else if (meta_mode) {
			if (view == "SERVER") {
				reqs_total = key_reqs["Sum:"]
				reqs_rate = reqs_total / time_delta
				reqs_bar = ""

				qlen_total = key_reqs["Sum:"]
				qlen_rate = qlen_total / time_delta
				qlen_bar = ""

				reqlen_total = reqs_total + qlen_total
				reqlen_rate = reqlen_total / time_delta
			} else {
				stat_total = key_stat["Sum:"]
				stat_rate = stat_total / time_delta
				stat_bar = ""

				statLI_total = key_statLI["Sum:"]
				statLI_rate = statLI_total / time_delta
				statLI_bar = ""

				stat_all_total = stat_total + statLI_total
				stat_all_rate = stat_all_total / time_delta
			}
		}

		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out,
				"ident", "total_" curview)
			if (data_mode) {
				json_out = json_add_uint(json_out,
					"total_bytes", rw_total)
				json_out = json_add_float(json_out,
					"total_rate", rw_rate)
				json_out = json_add_uint(json_out,
					"read_bytes", read_total)
				json_out = json_add_float(json_out,
					"read_rate", read_rate)
				json_out = json_add_uint(json_out,
					"write_bytes", write_total)
				json_out = json_add_float(json_out,
					"write_rate", write_rate)
			} else if (meta_mode) {
				if (view == "SERVER") {
					json_out = json_add_uint(json_out,
						"reqlen_total", reqlen_total)
					json_out = json_add_float(json_out,
						"reqlen_rate", reqlen_rate)
					json_out = json_add_uint(json_out,
						"reqs_total", reqs_total)
					json_out = json_add_float(json_out,
						"reqs_rate", reqs_rate)
					json_out = json_add_uint(json_out,
						"qlen_total", qlen_total)
					json_out = json_add_float(json_out,
						"qlen_rate", qlen_rate)
				} else {
					json_out = json_add_uint(json_out,
						"stat_all_total",
						stat_all_total)
					json_out = json_add_float(json_out,
						"stat_all_rate",
						stat_all_rate)
					json_out = json_add_uint(json_out,
						"stat_total", stat_total)
					json_out = json_add_float(json_out,
						"stat_rate", stat_rate)
					json_out = json_add_uint(json_out,
						"statLI_total", statLI_total)
					json_out = json_add_float(json_out,
						"statLI_rate", statLI_rate)
				}
			}
			buffer_add("{" json_out "}\n")
		} else if (show_basic && mode == "data") {
			# ST: VIEWS
			buffer_add1("total",
				humanize(rw_total),
				humanize(read_total), read_bar,
				write_bar, humanize(write_total))
		} else if (show_basic && mode == "meta") {
			# ST: VIEWS
			if (view == "SERVER") {
				buffer_add1("total",
					humanize(reqlen_total),
					humanize(reqs_total),
					reqs_bar, qlen_bar,
					humanize(qlen_total))
			} else {
				buffer_add1("total",
					humanize(stat_all_total),
					humanize(stat_total),
					stat_bar, statLI_bar,
					humanize(statLI_total))
			}
		} else if (mode == "data") {
			# ST: VIEWS
			buffer_add1("total",
				humanize(rw_rate),
				humanize(read_rate),
				read_bar, write_bar,
				humanize(write_rate))
		} else if (mode == "meta") {
			# ST: VIEWS
			if (view == "SERVER") {
				buffer_add1("total",
					humanize(reqlen_rate),
					humanize(reqs_rate),
					reqs_bar, qlen_bar,
					humanize(qlen_rate))
			} else {
				buffer_add1("total",
					humanize(stat_all_rate),
					humanize(stat_rate),
					stat_bar, statLI_bar,
					humanize(statLI_rate))
			}
		}

		#
		# Decorate combined read/write values
		# ST: SORTING
		#
		for (cred in _keys) {
			if (sort == "read") {
				v = int(key_read[cred])
			} else if (sort == "write") {
				v = int(key_write[cred])
			} else if (sort == "stat") {
				v = int(key_stat[cred])
			} else if (sort == "statLI") {
				v = int(key_statLI[cred])
			} else if (sort == "reqs") {
				v = int(key_reqs[cred])
			} else if (sort == "qlen") {
				v = int(key_qlen[cred])
			} else { # total
				v = 0
				if (data_mode) {
					v += key_read[cred]
					v += key_write[cred]
				} else if (meta_mode) {
					if (view == "SERVER") {
						v += key_reqs[cred]
						v += key_qlen[cred]
					} else {
						v += key_stat[cred]
						v += key_statLI[cred]
					}
				}
				v = int(v)
			}
			_keys[cred] = sprintf("%99d %s", v, cred)
		}

		#
		# Print subtotals
		#
		r = 1
		n = _asort(_keys, _keys_sorted)
		table_rows = output_json || !cons ? n : rows - 4
		for (i = n; i >= 1 && r <= table_rows; i--) {
			debug2("r=[%d] table_rows=[%d]", r, table_rows)
			cred = _keys_sorted[i]
			sub(/^ *[^ ]+ +/, "", cred) # Undecorate
			r += process_cred(curview, cred)
		}
		if (more = i > 0) buffer_add(sprintf("%s(%d more) ... %s",
			color ? inv bold yellow : "", i,
			color ? noinv nobold fgreset : ""))
	}

	function process_cred(curview, cred,
		read_total, write_total,
		cred_read, read_bar, read_bar_pct, read_bar_size, read_rate,
		cred_write, write_bar, write_bar_pct, write_bar_size,
		write_rate, cred_rw, rw_rate, pch,
		stat_total, statLI_total,
		cred_stat, stat_bar, stat_bar_pct, stat_bar_size, stat_rate,
		cred_statLI, statLI_bar, statLI_bar_pct, statLI_bar_size,
		statLI_rate, cred_stat_all, stat_all_rate,
		reqs_total, qlen_total,
		cred_reqs, reqs_bar, reqs_bar_pct, reqs_bar_size, reqs_rate,
		cred_qlen, qlen_bar, qlen_bar_pct, qlen_bar_size, qlen_rate,
		cred_reqlen, reqlen_rate)
	{
		if (cred == "Sum:") return 0
		pch = "="
		debug1("-> process_cred(curview = %s, ...)", curview)
		debug1("+ cred=[%s]", cred)

		if (data_mode) {
			read_total = key_read["Sum:"]
			write_total = key_write["Sum:"]

			cred_read = key_read[cred]
			cred_write = key_write[cred]
			cred_rw = cred_read + cred_write

			read_rate = cred_read / time_delta
			if (read_total > 0)
				read_bar_pct = cred_read / read_total
			else
				read_bar_pct = 0
			read_bar_size = bar_size * read_bar_pct
			read_bar = sprintf("%*s", read_bar_size, "")
			gsub(/ /, pch, read_bar)
			sub(/.$/, ">", read_bar)

			write_rate = cred_write / time_delta
			if (write_total > 0)
				write_bar_pct = cred_write / write_total
			else
				write_bar_pct = 0
			write_bar_size = bar_size * write_bar_pct
			write_bar = sprintf("%*s", write_bar_size, "")
			gsub(/ /, pch, write_bar)
			sub(/^./, "<", write_bar)
		} else if (meta_mode) {
			if (view == "SERVER") {
				reqs_total = key_reqs["Sum:"]
				qlen_total = key_qlen["Sum:"]

				cred_reqs = key_reqs[cred]
				cred_qlen = key_qlen[cred]
				cred_reqlen = cred_reqs + cred_qlen

				reqs_rate = cred_reqs / time_delta
				if (reqs_total > 0)
					reqs_bar_pct = cred_reqs / reqs_total
				else
					reqs_bar_pct = 0
				reqs_bar_size = bar_size * reqs_bar_pct
				reqs_bar = sprintf("%*s", reqs_bar_size, "")
				gsub(/ /, pch, reqs_bar)
				sub(/.$/, ">", reqs_bar)

				qlen_rate = creed_qlen / time_delta
				if (qlen_total > 0)
					qlen_bar_pct = cred_qlen / qlen_total
				else
					qlen_bar_pct = 0
				qlen_bar_size = bar_size * qlen_bar_pct
				qlen_bar = sprintf("%*s", qlen_bar_size, "")
				gsub(/ /, pch, qlen_bar)
				sub(/^./, "<", qlen_bar)
			} else {
				stat_total = key_stat["Sum:"]
				statLI_total = key_statLI["Sum:"]

				cred_stat = key_stat[cred]
				cred_statLI = key_statLI[cred]
				cred_stat_all = cred_stat + cred_statLI

				stat_rate = cred_stat / time_delta
				if (stat_total > 0)
					stat_bar_pct = cred_stat / stat_total
				else
					stat_bar_pct = 0
				stat_bar_size = bar_size * stat_bar_pct
				stat_bar = sprintf("%*s", stat_bar_size, "")
				gsub(/ /, pch, stat_bar)
				sub(/.$/, ">", stat_bar)

				statLI_rate = cred_statLI / time_delta
				if (statLI_total > 0) {
					statLI_bar_pct = cred_statLI
					statLI_bar_pct /= statLI_total
				} else
					statLI_bar_pct = 0
				statLI_bar_size = bar_size * statLI_bar_pct
				statLI_bar = sprintf("%*s",
					statLI_bar_size, "")
				gsub(/ /, pch, statLI_bar)
				sub(/^./, "<", statLI_bar)
			}
		}

		if (data_mode) {
			rw_rate = cred_rw / time_delta
		} else if (meta_mode) {
			if (view == "SERVER") {
				reqlen_rate = cred_reqlen / time_delta
			} else {
				stat_all_rate = cred_stat_all / time_delta
			}
		}
		if (output_json) {
			# ST: JSONDATA
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out, "ident", curview)
			if (redact && curview == "user") {
				if (cred !~ unredacted_users)
					cred = get_random(length(cred))
			} else if (redact && curview == "client") {
				if (cred !~ unredacted_clients)
					cred = get_random(length(cred))
			} else if (redact && curview == "server") {
				if (cred !~ unredacted_servers)
					cred = get_random(length(cred))
			}
			json_out = json_add_str(json_out, curview, cred)
			if (data_mode) {
				json_out = json_add_uint(json_out,
					"total_bytes", cred_rw)
				json_out = json_add_float(json_out,
					"total_rate", rw_rate)
				json_out = json_add_uint(json_out,
					"read_bytes", cred_read)
				json_out = json_add_float(json_out,
					"read_rate", read_rate)
				json_out = json_add_uint(json_out,
					"write_bytes", cred_write)
				json_out = json_add_float(json_out,
					"write_rate", write_rate)
			} else if (meta_mode) {
				if (view == "SERVER") {
					json_out = json_add_uint(json_out,
						"reqlen_total", cred_reqlen)
					json_out = json_add_float(json_out,
						"reqlen_rate", reqlen_rate)
					json_out = json_add_uint(json_out,
						"reqs_total", cerd_reqs)
					json_out = json_add_float(json_out,
						"reqs_rate", reqs_rate)
					json_out = json_add_uint(json_out,
						"qlen_total", cred_qlen)
					json_out = json_add_float(json_out,
						"qlen_rate", qlen_rate)
				} else {
					json_out = json_add_uint(json_out,
						"stat_all_total",
						cred_stat_all)
					json_out = json_add_float(json_out,
						"stat_all_rate",
						stat_all_rate)
					json_out = json_add_uint(json_out,
						"stat_total", cred_stat)
					json_out = json_add_float(json_out,
						"stat_rate", stat_rate)
					json_out = json_add_uint(json_out,
						"statLI_total", cred_statLI)
					json_out = json_add_float(json_out,
						"statLI_rate", statLI_rate)
				}
			}
			buffer_add("{" json_out "}\n")
		} else if (show_basic && mode == "data") {
			# ST: VIEWDATA
			buffer_add1(cred,
				humanize(cred_rw),
				humanize(cred_read), read_bar,
				write_bar, humanize(cred_write))
		} else if (show_basic && mode == "meta") {
			# ST: VIEWDATA
			if (view == "SERVER") {
				buffer_add1(cred,
					humanize(cred_reqlen),
					humanize(cred_reqs), reqs_bar,
					qlen_bar, humanize(cred_qlen))
			} else {
				buffer_add1(cred,
					humanize(cred_stat_all),
					humanize(cred_stat), stat_bar,
					statLI_bar, humanize(cred_statLI))
			}
		} else if (mode == "data") {
			# ST: VIEWDATA
			buffer_add1(cred,
				humanize(rw_rate),
				humanize(read_rate), read_bar,
				write_bar, humanize(write_rate))
		} else if (mode == "meta") {
			# ST: VIEWDATA
			if (view == "SERVER") {
				buffer_add1(cred,
					humanize(reqlen_rate),
					humanize(reqs_rate), reqs_bar,
					qlen_bar, humanize(qlen_rate))
			} else {
				buffer_add1(cred,
					humanize(stat_all_rate),
					humanize(stat_rate), stat_bar,
					statLI_bar, humanize(statLI_rate))
			}
		}

		return 1
	}

	######################################## MAIN

	sub(/^EXIT:/, "") { exit_status = $0; next }
	NR == 1 && $1 == "spawn" && !raw_view { next }

	raw_view {
		print

		# Exit if no more samples desired
		if (/^---$/) sample_check()

		if (!debugger) next
	}

	#
	# ST: CTLDATA
	#

	/^===/ { # Data start
		tm = _systime()
		if (data_mode) {
			read_total = write_total = 0
		} else if (meta_mode) {
			if (view == "SERVER") {
				reqs_total = qlen_total = 0
			} else {
				stat_total = statLI_total = 0
			}
		}
		clear_data()
		clear_buffer()
		next
	}

	view == "SERVER" && /^[[:space:]]*[[:digit:]]/ { # Data
		parse_line()
		next
	}

	view != "SERVER" && /^[^-=[:space:]]/ && $1 !~ /\|/ { # Data
		parse_line()
		next
	}

	/^---$/ { # Data end
		buffer_add_data()

		#
		# Dump information
		#
		print_buffer()
		sample_check() # Exit if no more samples desired
		next
	}

	#
	# ST: CALLS
	#

	{ call = "" }

	match($0, /^[_a-z]+(-[_a-z]+)?\|/) {
		call = substr($0, 1, RLENGTH - 1)
		$0 = substr($0, RSTART + RLENGTH)
	}

	call == "resize" {
		if (output_json) next
		rows = $1
		cols = $2
		resize()
	}

	################################################## END

	END { exit exit_status }
' # END-QUOTE

################################################################################
# END
################################################################################
# Local Variables:
# mode: sh
# tab-width: 8
# sh-basic-offset: 8
# indent-tabs-mode: t
# backward-delete-char-untabify-method: nil
# End:
